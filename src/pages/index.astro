---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';

// Get featured letters and speeches from content collections
const allLetters = await getCollection('letters');
const allSpeeches = await getCollection('speeches');
const allContent = [
  ...allLetters.map(item => ({ ...item, contentType: 'letter' })),
  ...allSpeeches.map(item => ({ ...item, contentType: 'speech' }))
];

// Get featured content (mix of letters and speeches)
const featuredContent = allContent
  .filter(item => item.data.featured)
  .sort((a, b) => b.data.date.getTime() - a.data.date.getTime())
  .slice(0, 6);

// If we don't have enough featured, supplement with most recent
const additionalContent = allContent
  .filter(item => !item.data.featured)
  .sort((a, b) => b.data.date.getTime() - a.data.date.getTime())
  .slice(0, Math.max(0, 6 - featuredContent.length));

const displayContent = [...featuredContent, ...additionalContent].slice(0, 6);

// Group content by era for browsing
const eras = [
  { name: '20th Century', start: 1900, end: 2000, items: [] as typeof allContent },
  { name: '19th Century', start: 1800, end: 1900, items: [] as typeof allContent },
  { name: '18th Century & Earlier', start: 0, end: 1800, items: [] as typeof allContent }
];

allContent.forEach(item => {
  const year = item.data.date.getFullYear();
  const era = eras.find(e => year >= e.start && year < e.end);
  if (era) era.items.push(item);
});
---

<Layout title="Paper Lanterns">
  <Navigation />
  
  <main>
    <div class="container">
      <header class="header">
        <h1 class="site-title">Paper Lanterns</h1>
        <p class="hero-text">
          Before emails, before texts, before instant messages—there were letters. 
          Handwritten, deliberate, and profound. These are the intimate conversations 
          between history's greatest minds: the love letters that broke hearts, 
          the confessions that revealed souls, the ideas that sparked revolutions.
        </p>
      </header>

      <nav class="navigation">
        <p class="intro-text">Explore our collection</p>
      </nav>

      <section class="browse-options">
        <div class="stats-overview">
          <div class="stat-item">
            <span class="stat-number">{allLetters.length}</span>
            <span class="stat-label">Letters</span>
          </div>
          <div class="stat-item">
            <span class="stat-number">{allSpeeches.length}</span>
            <span class="stat-label">Speeches</span>
          </div>
          <div class="stat-item">
            <span class="stat-number">{eras.filter(e => e.items.length > 0).length}</span>
            <span class="stat-label">Eras</span>
          </div>
        </div>

        <div class="browse-by-era">
          <h3>Browse by Era</h3>
          <div class="era-links">
            {eras.filter(era => era.items.length > 0).map(era => (
              <a href={`/search?q=${era.name.replace(/\s+/g, '-').toLowerCase()}`} class="era-link">
                <span class="era-name">{era.name}</span>
                <span class="era-count">{era.items.length}</span>
              </a>
            ))}
          </div>
        </div>

        <div class="random-section">
          <button class="random-letter-btn-large" onclick="getRandomLetter()">
            <svg class="shuffle-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="16,3 21,3 21,8"></polyline>
              <line x1="4" y1="20" x2="21" y2="3"></line>
              <polyline points="21,16 21,21 16,21"></polyline>
              <line x1="15" y1="15" x2="21" y2="21"></line>
              <line x1="4" y1="4" x2="9" y2="9"></line>
            </svg>
            <span>Surprise Me</span>
          </button>
          <p class="random-description">Feeling adventurous? Let serendipity guide you to a hidden gem.</p>
        </div>
      </section>

      <section class="featured-content">
        <h2 class="section-title">Featured Letters & Speeches</h2>
        {displayContent.map((item, index) => (
          <article class="content-preview" data-number={String(index + 1).padStart(2, '0')}>
            <div class="content-meta">
              <span class="content-type">{item.contentType === 'letter' ? 'Letter' : 'Speech'}</span>
              <a href={`/${item.contentType}/${item.slug}`} class="author-name">{item.data.author.name}</a>
              <div class="content-context">{item.data.context}</div>
            </div>
            
            <div class="content-excerpt" style={`--drop-cap-color: ${item.data.drop_cap_color}`}>
              {item.data.excerpt}
            </div>

            <div class="continue-reading">
              <a href={`/${item.contentType}/${item.slug}`}>Continue reading</a>
            </div>
          </article>
        ))}
      </section>

      <footer class="footer">
        <p>All letters are in the public domain</p>
      </footer>
    </div>
  </main>
</Layout>

<style>
  .container {
    max-width: 720px;
    margin: 0 auto;
    padding: 0 3rem;
  }

  .header {
    padding: 16rem 0 8rem;
    text-align: center;
    position: relative;
  }

  .site-title {
    font-family: 'EB Garamond', serif;
    font-size: clamp(4rem, 12vw, 7rem);
    font-weight: 500;
    color: var(--text-primary);
    margin-bottom: 2rem;
    letter-spacing: -0.02em;
    line-height: 0.9;
  }

  .hero-text {
    font-size: 1.3rem;
    line-height: 1.6;
    color: var(--text-secondary);
    font-weight: 400;
    margin-bottom: 8rem;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
  }

  .navigation {
    text-align: center;
    margin-bottom: 6rem;
    position: relative;
  }

  .navigation::before {
    content: '✦';
    position: absolute;
    top: -4rem;
    left: 50%;
    transform: translateX(-50%);
    color: var(--accent-gold);
    font-size: 1.5rem;
    opacity: 0.6;
  }

  .intro-text {
    color: var(--text-muted);
    font-size: 0.9rem;
    margin-bottom: 3rem;
    font-weight: 300;
  }

  .browse-options {
    margin-bottom: 6rem;
    text-align: center;
  }

  .stats-overview {
    display: flex;
    justify-content: center;
    gap: 3rem;
    margin-bottom: 4rem;
    padding: 2rem 0;
    border-top: 1px solid var(--border-secondary);
    border-bottom: 1px solid var(--border-secondary);
  }

  .stat-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
  }

  .stat-number {
    font-family: 'EB Garamond', serif;
    font-size: 2rem;
    font-weight: 500;
    color: var(--accent-primary);
  }

  .stat-label {
    font-size: 0.85rem;
    color: var(--text-muted);
    text-transform: uppercase;
    letter-spacing: 0.1em;
  }

  .browse-by-era h3 {
    font-family: 'EB Garamond', serif;
    font-size: 1.2rem;
    color: var(--text-primary);
    margin-bottom: 1.5rem;
  }

  .era-links {
    display: flex;
    justify-content: center;
    gap: 1.5rem;
    flex-wrap: wrap;
  }

  .era-link {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 1rem 1.5rem;
    background: var(--bg-accent);
    border: 1px solid var(--border-accent);
    border-radius: 12px;
    text-decoration: none;
    transition: all 0.2s ease;
    min-width: 120px;
  }

  .era-link:hover {
    border-color: var(--accent-primary);
    background: rgba(212, 165, 116, 0.05);
  }

  .era-name {
    font-size: 0.9rem;
    color: var(--text-primary);
    font-weight: 500;
    margin-bottom: 0.25rem;
  }

  .era-count {
    font-size: 0.75rem;
    color: var(--accent-secondary);
  }

  .random-section {
    margin-top: 3rem;
    text-align: center;
    padding: 2rem 0;
  }

  .random-letter-btn-large {
    display: inline-flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem 2rem;
    background: var(--accent-primary);
    color: white;
    border: none;
    border-radius: 30px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    font-family: inherit;
    box-shadow: 0 4px 12px rgba(212, 165, 116, 0.3);
  }

  .random-letter-btn-large:hover {
    background: var(--accent-tertiary);
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(212, 165, 116, 0.4);
  }

  .random-letter-btn-large .shuffle-icon {
    transition: transform 0.3s ease;
  }

  .random-letter-btn-large:hover .shuffle-icon {
    transform: rotate(180deg);
  }

  .random-description {
    font-size: 0.9rem;
    color: var(--text-muted);
    margin-top: 1rem;
    font-style: italic;
  }

  .section-title {
    font-family: 'EB Garamond', serif;
    font-size: 1.5rem;
    font-weight: 500;
    color: var(--text-primary);
    text-align: center;
    margin-bottom: 4rem;
    position: relative;
  }

  .section-title::after {
    content: '✦';
    position: absolute;
    bottom: -1.5rem;
    left: 50%;
    transform: translateX(-50%);
    color: var(--accent-gold);
    font-size: 1rem;
    opacity: 0.6;
  }

  .featured-content {
    display: flex;
    flex-direction: column;
    gap: 5rem;
  }

  .content-preview {
    position: relative;
  }

  .content-preview::before {
    content: attr(data-number);
    position: absolute;
    left: -6rem;
    top: -1rem;
    font-size: 1.2rem;
    color: var(--text-light);
    font-weight: 300;
    opacity: 0.5;
  }

  .content-meta {
    margin-bottom: 4rem;
    text-align: center;
    position: relative;
  }

  .content-meta::after {
    content: '◦';
    position: absolute;
    bottom: -2rem;
    left: 50%;
    transform: translateX(-50%);
    color: currentColor;
    opacity: 0.2;
    font-size: 0.8rem;
  }

  .content-type {
    display: block;
    font-size: 0.7rem;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    color: var(--accent-secondary);
    margin-bottom: 0.5rem;
    font-weight: 500;
  }

  .author-name {
    font-family: 'EB Garamond', serif;
    font-size: 1.2rem;
    font-weight: 500;
    color: var(--text-primary);
    margin-bottom: 0.5rem;
    letter-spacing: 0.02em;
    font-variant: small-caps;
    text-decoration: none;
    transition: color 0.2s ease;
    cursor: pointer;
  }

  .author-name:hover {
    color: var(--accent-secondary);
  }

  .content-context {
    color: var(--accent-secondary);
    font-size: 0.95rem;
    font-style: italic;
  }

  .content-excerpt {
    font-size: 1.3rem;
    line-height: 1.7;
    color: var(--text-primary);
    text-align: left;
    position: relative;
    max-width: 640px;
  }

  .content-excerpt::first-letter {
    font-family: 'EB Garamond', serif;
    font-size: 10rem;
    line-height: 0.65;
    float: left;
    margin: 0.15rem 1.5rem 0.5rem 0;
    color: var(--drop-cap-color);
    font-weight: 500;
    opacity: 0.6;
    filter: saturate(0.7) brightness(1.1);
  }

  .continue-reading {
    text-align: center;
    margin: 3rem 0 0;
    position: relative;
  }

  .continue-reading::before {
    content: '';
    position: absolute;
    top: -1.5rem;
    left: 50%;
    transform: translateX(-50%);
    width: 3px;
    height: 3px;
    background: currentColor;
    border-radius: 50%;
    opacity: 0.3;
  }

  .continue-reading a {
    color: var(--accent-secondary);
    text-decoration: none;
    font-size: 0.9rem;
    font-weight: 400;
    letter-spacing: 0.02em;
    transition: all 0.2s ease;
    padding: 0.5rem 1.2rem;
    border: 1px solid var(--border-accent);
    border-radius: 25px;
    background: var(--bg-accent);
    position: relative;
    display: inline-flex;
    align-items: center;
    gap: 0.4rem;
  }

  .continue-reading a::after {
    content: '→';
    transition: transform 0.2s ease;
    font-size: 0.8rem;
  }

  .continue-reading a:hover {
    color: var(--text-primary);
    border-color: var(--accent-secondary);
    background: var(--bg-accent);
    transform: translateY(-1px);
  }

  .continue-reading a:hover::after {
    transform: translateX(2px);
  }

  .footer {
    text-align: center;
    padding: 8rem 0 4rem;
    color: var(--text-light);
    font-size: 0.8rem;
    font-weight: 300;
  }

  @media (max-width: 768px) {
    .container {
      padding: 4rem 2rem 2rem;
      max-width: 500px;
    }

    .header {
      padding: 12rem 0 6rem;
    }

    .site-title {
      font-size: clamp(3rem, 15vw, 5rem);
    }

    .stats-overview {
      gap: 2rem;
      flex-direction: column;
    }

    .stat-item {
      flex-direction: row;
      justify-content: space-between;
      max-width: 200px;
      margin: 0 auto;
    }

    .era-links {
      flex-direction: column;
      gap: 1rem;
    }

    .era-link {
      min-width: auto;
      flex-direction: row;
      justify-content: space-between;
      padding: 0.75rem 1rem;
    }

    .featured-content {
      gap: 4rem;
    }

    .content-preview::before {
      display: none;
    }

    .content-excerpt::first-letter {
      font-size: 6rem;
      margin: 0.1rem 1rem 0.3rem 0;
    }
  }
</style>

<script is:inline>
  // Make function globally available
  window.getRandomLetter = async function() {
    const button = document.querySelector('.random-letter-btn-large');
    if (!button) return;
    
    // Disable button and show loading state
    button.disabled = true;
    const originalText = button.querySelector('span')?.textContent;
    const span = button.querySelector('span');
    if (span) span.textContent = 'Finding...';
    
    try {
      // Fetch all letters and speeches from the API
      const response = await fetch('/api/random-content.json');
      if (!response.ok) {
        throw new Error('Failed to fetch content');
      }
      
      const data = await response.json();
      const allContent = data.content;
      
      if (allContent.length === 0) {
        throw new Error('No content available');
      }
      
      // Select a random item
      const randomIndex = Math.floor(Math.random() * allContent.length);
      const randomItem = allContent[randomIndex];
      
      // Navigate to the random letter/speech
      window.location.href = `/${randomItem.collection}/${randomItem.slug}`;
      
    } catch (error) {
      console.error('Error fetching random letter:', error);
      
      // Re-enable button and restore text
      button.disabled = false;
      if (span && originalText) span.textContent = originalText;
      
      // Show error feedback
      if (span) {
        span.textContent = 'Try again';
        setTimeout(() => {
          if (originalText) span.textContent = originalText;
        }, 2000);
      }
    }
  };
</script>
