---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.astro';

export async function getStaticPaths() {
  const speeches = await getCollection('speeches');
  return speeches.map((speech) => ({
    params: { slug: speech.slug },
    props: speech,
  }));
}

const speech = Astro.props;
const { Content } = await speech.render();

// Calculate reading time (rough estimate: 200 words per minute)
const wordCount = speech.body.split(/\s+/).length;
const readTime = Math.ceil(wordCount / 200);

// Get other speeches for navigation (simplified for now)
const allSpeeches = await getCollection('speeches');
const currentIndex = allSpeeches.findIndex(s => s.slug === speech.slug);
const prevSpeech = currentIndex > 0 ? allSpeeches[currentIndex - 1] : null;
const nextSpeech = currentIndex < allSpeeches.length - 1 ? allSpeeches[currentIndex + 1] : null;
---

<Layout 
  title={`${speech.data.title} by ${speech.data.author.name} - Paper Lanterns`}
  description={`A ${speech.data.date.getFullYear()} speech by ${speech.data.author.name}${speech.data.context ? ` ${speech.data.context.replace(/\[([^\]]*)\]\([^)]*\)/g, '$1')}` : ''}. ${speech.data.excerpt}`}
  author={speech.data.author.name}
  publishedTime={speech.data.date.toISOString()}
>
  <Navigation />
  
  <main class="reading-container">
    <a href="/" class="back-link">← Back to Paper Lanterns</a>
    
    <article class="speech">
      <div class="speech-meta">
        <h1 class="author">{speech.data.author.name}</h1>
        <p class="context">{speech.data.context.replace(/\[([^\]]*)\]\([^)]*\)/g, '$1')}</p>
        <div class="reading-info">
          <span>{readTime} min read</span>
          {speech.data.location && <span> • {speech.data.location}</span>}
          {speech.data.occasion && <span> • {speech.data.occasion}</span>}
        </div>
      </div>
      
      <div class="speech-content" style={`--drop-cap-color: ${speech.data.drop_cap_color}`}>
        <Content />
      </div>

      {speech.data.video && speech.data.video.youtube_id && (
        <div class="video-section">
          <h3 class="video-title">Watch the Historic Speech</h3>
          <div class="video-container">
            <iframe
              src={`https://www.youtube-nocookie.com/embed/${speech.data.video.youtube_id}?rel=0&modestbranding=1`}
              title={speech.data.video.title || "Speech Video"}
              frameborder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
              allowfullscreen
            ></iframe>
          </div>
          {speech.data.video.description && (
            <p class="video-description">{speech.data.video.description}</p>
          )}
        </div>
      )}

      {speech.data.about && (speech.data.about.context || speech.data.about.significance || speech.data.about.author_bio || speech.data.about.occasion_info || (speech.data.about.links && speech.data.about.links.length > 0)) && (
        <section class="about-section">
          <h2 class="about-title">About This Speech</h2>
          
          {speech.data.about.context && (
            <div class="about-item">
              <h3>Historical Context</h3>
              <div class="about-content">
                <p>{speech.data.about.context}</p>
              </div>
            </div>
          )}
          
          {speech.data.about.significance && (
            <div class="about-item">
              <h3>Significance</h3>
              <div class="about-content">
                <p>{speech.data.about.significance}</p>
              </div>
            </div>
          )}
          
          {speech.data.about.author_bio && (
            <div class="about-item">
              <h3>About {speech.data.author.name}</h3>
              <div class="about-content">
                <p>{speech.data.about.author_bio}</p>
              </div>
            </div>
          )}
          
          {speech.data.about.occasion_info && (
            <div class="about-item">
              <h3>About the Occasion</h3>
              <div class="about-content">
                <p>{speech.data.about.occasion_info}</p>
              </div>
            </div>
          )}
          
          {speech.data.about.links && speech.data.about.links.length > 0 && (
            <div class="about-item">
              <h3>Additional Resources</h3>
              <ul class="resource-links">
                {speech.data.about.links.map(link => (
                  <li>
                    <a href={link.url} target="_blank" rel="noopener noreferrer" class="resource-link">
                      {link.title}
                      <svg class="external-link-icon" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M7 7h10v10M7 17L17 7"></path>
                      </svg>
                    </a>
                    {link.description && <span class="resource-description">{link.description}</span>}
                  </li>
                ))}
              </ul>
            </div>
          )}
        </section>
      )}

      <div class="speech-actions">
        <button data-action="share" class="action-btn">Share</button>
        <button data-action="copy-link" class="action-btn">Copy Link</button>
        <button data-action="copy-text" class="action-btn">Copy Text</button>
      </div>
    </article>

    <nav class="speech-nav">
      {prevSpeech ? (
        <a href={`/speech/${prevSpeech.slug}`} class="nav-link">← Previous speech</a>
      ) : (
        <span class="nav-link disabled">← Previous speech</span>
      )}
      
      <div class="speech-info">
        Speech {currentIndex + 1} of {allSpeeches.length}
      </div>
      
      {nextSpeech ? (
        <a href={`/speech/${nextSpeech.slug}`} class="nav-link">Next speech →</a>
      ) : (
        <span class="nav-link disabled">Next speech →</span>
      )}
    </nav>

    <footer class="footer">
      <p>Source: {speech.data.source}</p>
      <p>All content is in the public domain</p>
    </footer>
  </main>
</Layout>

<style>
  .reading-container {
    max-width: 680px;
    margin: 0 auto;
    padding: 6rem 2rem 4rem;
    position: relative;
  }

  .reading-container::before {
    content: '';
    position: absolute;
    left: -2rem;
    top: 0;
    width: 3px;
    height: 80px;
    background: linear-gradient(180deg, var(--accent-primary) 0%, var(--accent-tertiary) 50%, transparent 100%);
    opacity: 0.6;
  }

  .back-link {
    display: inline-block;
    color: var(--accent-secondary);
    text-decoration: none;
    font-size: 0.9rem;
    margin-bottom: 4rem;
    font-weight: 300;
    transition: color 0.2s ease;
  }

  .back-link:hover {
    color: var(--text-primary);
  }

  .speech {
    margin-bottom: 6rem;
  }

  .speech-meta {
    margin-bottom: 3rem;
    text-align: left;
  }

  .author {
    font-family: 'EB Garamond', serif;
    font-size: 1.4rem;
    font-weight: 500;
    color: var(--text-primary);
    margin-bottom: 0.3rem;
    letter-spacing: 0.01em;
    font-variant: small-caps;
  }

  .context {
    color: var(--accent-secondary);
    font-size: 1rem;
    font-style: italic;
    margin-bottom: 0.5rem;
  }

  .reading-info {
    color: var(--text-muted);
    font-size: 0.85rem;
    font-weight: 300;
  }

  .speech-content {
    font-size: 1.3rem;
    line-height: 1.75;
    color: var(--text-primary);
    position: relative;
    overflow-wrap: break-word;
    word-wrap: break-word;
    word-break: break-word;
  }

  .speech-content :global(p:first-of-type::first-letter) {
    font-family: 'EB Garamond', serif;
    font-size: 3.2rem;
    line-height: 0.8;
    float: left;
    margin: 0.05rem 0.4rem -0.1rem 0;
    color: var(--text-primary);
    font-weight: 400;
    opacity: 0.85;
  }

  .speech-content :global(p) {
    margin-bottom: 1.5rem;
    text-indent: 1.5rem;
  }

  .speech-content :global(p:first-of-type) {
    text-indent: 0;
  }

  .speech-content :global(p:last-child) {
    margin-bottom: 0;
  }

  .video-section {
    margin: 3rem 0;
    padding: 2rem 0;
    border-top: 1px solid var(--border-secondary);
    border-bottom: 1px solid var(--border-secondary);
  }

  .video-title {
    font-family: 'EB Garamond', serif;
    font-size: 1.3rem;
    font-weight: 500;
    color: var(--text-primary);
    margin-bottom: 1.5rem;
    text-align: center;
  }

  .video-container {
    position: relative;
    width: 100%;
    height: 0;
    padding-bottom: 56.25%; /* 16:9 aspect ratio */
    background: var(--bg-secondary);
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 20px var(--drop-shadow);
  }

  .video-container iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: none;
  }

  .video-description {
    margin-top: 1rem;
    text-align: center;
    color: var(--text-secondary);
    font-size: 0.9rem;
    font-style: italic;
    line-height: 1.5;
  }

  .about-section {
    background: var(--bg-accent);
    border: 1px solid var(--border-accent);
    border-radius: 12px;
    padding: 3rem;
    margin: 3rem 0 0 0;
    position: relative;
  }

  .about-section::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, var(--accent-primary) 0%, var(--accent-tertiary) 50%, var(--accent-primary) 100%);
    border-radius: 12px 12px 0 0;
    opacity: 0.6;
  }

  .about-title {
    font-family: 'EB Garamond', serif;
    font-size: 1.5rem;
    font-weight: 500;
    color: var(--text-primary);
    margin-bottom: 2rem;
    text-align: center;
    position: relative;
  }

  .about-title::after {
    content: '✦';
    position: absolute;
    bottom: -1rem;
    left: 50%;
    transform: translateX(-50%);
    color: var(--accent-primary);
    font-size: 0.8rem;
    opacity: 0.6;
  }

  .about-item {
    margin-bottom: 2.5rem;
  }

  .about-item:last-child {
    margin-bottom: 0;
  }

  .about-item h3 {
    font-family: 'EB Garamond', serif;
    font-size: 1.1rem;
    font-weight: 500;
    color: var(--accent-secondary);
    margin-bottom: 0.8rem;
    letter-spacing: 0.01em;
  }

  .about-content {
    font-size: 1rem;
    line-height: 1.6;
    color: var(--text-secondary);
  }

  .about-content p {
    margin-bottom: 1rem;
  }

  .about-content p:last-child {
    margin-bottom: 0;
  }

  .about-content a {
    color: var(--accent-secondary);
    text-decoration: none;
    border-bottom: 1px solid rgba(139, 115, 85, 0.3);
    transition: all 0.2s ease;
  }

  .about-content a:hover {
    color: var(--text-primary);
    border-bottom-color: rgba(139, 115, 85, 0.6);
  }

  .resource-links {
    list-style: none;
    padding: 0;
  }

  .resource-links li {
    margin-bottom: 1rem;
    padding-left: 1.5rem;
    position: relative;
  }

  .resource-links li::before {
    content: '→';
    position: absolute;
    left: 0;
    color: var(--accent-primary);
    font-weight: 500;
  }

  .resource-link {
    color: var(--accent-secondary);
    text-decoration: none;
    font-weight: 400;
    display: inline-flex;
    align-items: center;
    gap: 0.3rem;
    transition: color 0.2s ease;
  }

  .resource-link:hover {
    color: var(--text-primary);
  }

  .external-link-icon {
    opacity: 0.6;
    transition: opacity 0.2s ease;
  }

  .resource-link:hover .external-link-icon {
    opacity: 1;
  }

  .resource-description {
    display: block;
    font-size: 0.9rem;
    color: var(--text-muted);
    margin-top: 0.3rem;
    font-style: italic;
  }

  .speech-actions {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin: 3rem 0;
    padding: 2rem 0;
    border-top: 1px solid var(--border-secondary);
    border-bottom: 1px solid var(--border-secondary);
  }

  .action-btn {
    background: none;
    border: 1px solid var(--text-light);
    padding: 0.5rem 1rem;
    border-radius: 20px;
    color: var(--text-tertiary);
    font-size: 0.85rem;
    cursor: pointer;
    transition: all 0.2s ease;
    font-family: inherit;
  }

  .action-btn:hover {
    border-color: var(--accent-primary);
    color: var(--text-primary);
    background: rgba(212, 165, 116, 0.05);
  }

  .speech-nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 4rem 0;
    padding: 2rem 0;
    border-top: 1px solid var(--border-secondary);
  }

  .nav-link {
    color: var(--accent-secondary);
    text-decoration: none;
    font-size: 0.9rem;
    font-weight: 300;
    transition: color 0.2s ease;
  }

  .nav-link:hover {
    color: var(--text-primary);
  }

  .nav-link.disabled {
    color: var(--text-light);
    pointer-events: none;
  }

  .speech-info {
    text-align: center;
    color: var(--text-muted);
    font-size: 0.85rem;
  }

  .footer {
    text-align: center;
    padding: 4rem 0;
    color: var(--text-light);
    font-size: 0.8rem;
    font-weight: 300;
    border-top: 1px solid var(--border-secondary);
    margin-top: 4rem;
  }

  .footer p {
    margin-bottom: 0.5rem;
  }

  @media (max-width: 768px) {
    .reading-container {
      padding: 4rem 1.5rem 2rem;
    }

    .reading-container::before {
      display: none;
    }

    .speech-content {
      font-size: 1.2rem;
    }

    .speech-content :global(p:first-of-type::first-letter) {
      font-size: 2.8rem;
      margin: 0.05rem 0.3rem -0.05rem 0;
      line-height: 0.85;
    }

    .speech-nav {
      flex-direction: column;
      gap: 1rem;
      text-align: center;
    }

    .speech-actions {
      flex-wrap: wrap;
      justify-content: center;
    }

    .about-section {
      padding: 2rem 1.5rem;
      margin: 3rem 0;
    }

    .about-title {
      font-size: 1.3rem;
    }

    .about-item h3 {
      font-size: 1rem;
    }

    .about-content {
      font-size: 0.95rem;
    }
  }

  @media (max-width: 480px) {
    .reading-container {
      padding: 0 1.25rem;
    }

    .speech-title {
      font-size: 1.875rem;
      line-height: 1.3;
    }

    .speech-content {
      font-size: 1.15rem;
      line-height: 1.75;
    }

    .speech-content :global(p:first-of-type::first-letter) {
      font-size: 2.5rem;
      margin: 0.05rem 0.25rem -0.05rem 0;
      line-height: 0.9;
    }
  }
</style>

<script>
  // Share functionality
  async function shareContent() {
    if (navigator.share) {
      try {
        await navigator.share({
          title: document.title,
          url: window.location.href
        });
      } catch (err) {
        copyLink();
      }
    } else {
      copyLink();
    }
  }

  // Copy link to clipboard
  async function copyLink() {
    try {
      await navigator.clipboard.writeText(window.location.href);
      showToast('Link copied to clipboard');
    } catch (err) {
      // Fallback for older browsers
      const textArea = document.createElement('textarea');
      textArea.value = window.location.href;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      showToast('Link copied to clipboard');
    }
  }

  // Copy text content
  async function copyText() {
    const speechContent = document.querySelector('.speech-content');
    if (speechContent) {
      const text = speechContent.textContent || speechContent.innerText;
      try {
        await navigator.clipboard.writeText(text);
        showToast('Speech text copied to clipboard');
      } catch (err) {
        console.error('Failed to copy text:', err);
      }
    }
  }

  // Simple toast notification
  function showToast(message: string) {
    const toast = document.createElement('div');
    toast.style.cssText = `
      position: fixed;
      bottom: 2rem;
      left: 50%;
      transform: translateX(-50%);
      background: var(--text-primary);
      color: white;
      padding: 0.75rem 1.5rem;
      border-radius: 25px;
      font-size: 0.9rem;
      z-index: 1000;
      opacity: 0;
      transition: opacity 0.3s ease;
    `;
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => toast.style.opacity = '1', 100);
    setTimeout(() => {
      toast.style.opacity = '0';
      setTimeout(() => document.body.removeChild(toast), 300);
    }, 2000);
  }

  // Make functions globally available
  (window as any).shareContent = shareContent;
  (window as any).copyLink = copyLink;
  (window as any).copyText = copyText;
</script>