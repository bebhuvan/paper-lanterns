---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';

const essays = await getCollection('essays');
const sortedEssays = essays.sort((a, b) => b.data.date.getTime() - a.data.date.getTime());

// Group by author
const essaysByAuthor = sortedEssays.reduce((acc, essay) => {
  const author = essay.data.author.name;
  if (!acc[author]) {
    acc[author] = [];
  }
  acc[author].push(essay);
  return acc;
}, {} as Record<string, typeof essays>);

const authors = Object.keys(essaysByAuthor).sort();
---

<Layout title="Essays - Voice from Time" description="Explore thoughtful essays on philosophy, culture, politics, and society from history's great thinkers.">
  <Navigation />
  
  <main class="essays-container">
    <div class="container">
      <header class="essays-header">
        <h1 class="essays-title">Essays</h1>
        <p class="essays-description">
          Thoughtful reflections on philosophy, culture, politics, and the human condition from history's great minds. 
          These essays offer timeless insights that remain relevant across generations.
        </p>
      </header>

      <div class="essays-stats">
        <div class="stat">
          <span class="stat-number">{essays.length}</span>
          <span class="stat-label">Essays</span>
        </div>
        <div class="stat">
          <span class="stat-number">{authors.length}</span>
          <span class="stat-label">Authors</span>
        </div>
        <div class="stat">
          <span class="stat-number">{new Set(essays.map(e => e.data.date.getFullYear())).size}</span>
          <span class="stat-label">Years Covered</span>
        </div>
      </div>

      <div class="essays-filters">
        <div class="filter-group">
          <label for="author-filter" class="filter-label">Author:</label>
          <select id="author-filter" class="filter-select">
            <option value="all">All Authors</option>
            {authors.map(author => (
              <option value={author}>{author}</option>
            ))}
          </select>
        </div>
        
        <div class="filter-group">
          <label for="year-filter" class="filter-label">Year:</label>
          <select id="year-filter" class="filter-select">
            <option value="all">All Years</option>
            {[...new Set(essays.map(e => e.data.date.getFullYear()))].sort((a, b) => b - a).map(year => (
              <option value={year}>{year}</option>
            ))}
          </select>
        </div>
      </div>

      <div class="essays-grid" id="essays-grid">
        {sortedEssays.map(essay => (
          <article class="essay-card" data-author={essay.data.author.name} data-year={essay.data.date.getFullYear()}>
            <div class="essay-meta">
              <time class="essay-date">
                {essay.data.date.toLocaleDateString('en-US', { 
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric'
                })}
              </time>
              <span class="essay-author">{essay.data.author.name}</span>
            </div>
            
            <h2 class="essay-title">
              <a href={`/essay/${essay.slug}`}>
                {essay.data.title}
              </a>
            </h2>
            
            <p class="essay-excerpt">{essay.data.excerpt}</p>
            
            {essay.data.journal && (
              <p class="essay-publication">
                Published in <em>{essay.data.journal}</em>
              </p>
            )}
            
            {essay.data.tags.length > 0 && (
              <div class="essay-tags">
                {essay.data.tags.slice(0, 4).map(tag => (
                  <span class="tag">{tag}</span>
                ))}
              </div>
            )}
          </article>
        ))}
      </div>

      <footer class="essays-footer">
        <p>All essays are in the public domain</p>
      </footer>
    </div>
  </main>
</Layout>

<style>
  .essays-container {
    padding: 6rem 0 4rem;
    min-height: 100vh;
  }

  .container {
    max-width: 1000px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  .essays-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .essays-title {
    font-family: 'EB Garamond', serif;
    font-size: 3rem;
    font-weight: 500;
    color: var(--text-primary);
    margin-bottom: 1rem;
  }

  .essays-description {
    font-size: 1.1rem;
    color: var(--text-tertiary);
    line-height: 1.6;
    max-width: 700px;
    margin: 0 auto;
  }

  .essays-stats {
    display: flex;
    justify-content: center;
    gap: 3rem;
    margin-bottom: 3rem;
    padding: 2rem 0;
    border-top: 1px solid var(--border-secondary);
    border-bottom: 1px solid var(--border-secondary);
  }

  .stat {
    text-align: center;
  }

  .stat-number {
    display: block;
    font-family: 'EB Garamond', serif;
    font-size: 2rem;
    font-weight: 500;
    color: var(--accent-primary);
    margin-bottom: 0.25rem;
  }

  .stat-label {
    font-size: 0.9rem;
    color: var(--text-muted);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .essays-filters {
    display: flex;
    justify-content: center;
    gap: 2rem;
    margin-bottom: 3rem;
    padding: 1.5rem;
    background: var(--bg-accent);
    border-radius: 12px;
    border: 1px solid var(--border-accent);
  }

  .filter-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    align-items: center;
  }

  .filter-label {
    font-size: 0.85rem;
    color: var(--text-secondary);
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .filter-select {
    padding: 0.5rem 1rem;
    border: 1px solid var(--border-secondary);
    border-radius: 8px;
    background: var(--bg-primary);
    color: var(--text-primary);
    font-size: 0.9rem;
    cursor: pointer;
    transition: border-color 0.2s ease;
  }

  .filter-select:focus {
    outline: none;
    border-color: var(--accent-primary);
  }

  .essays-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 2rem;
    margin-bottom: 4rem;
  }

  .essay-card {
    background: var(--bg-primary);
    border-radius: 12px;
    padding: 2rem;
    border: 1px solid var(--border-secondary);
    transition: all 0.3s ease;
  }

  .essay-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 25px var(--drop-shadow);
  }

  .essay-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    font-size: 0.85rem;
    color: var(--text-muted);
  }

  .essay-date {
    color: var(--accent-secondary);
  }

  .essay-author {
    font-weight: 500;
    color: var(--text-secondary);
  }

  .essay-title {
    margin-bottom: 1rem;
  }

  .essay-title a {
    font-family: 'EB Garamond', serif;
    font-size: 1.4rem;
    font-weight: 500;
    color: var(--text-primary);
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .essay-title a:hover {
    color: var(--accent-primary);
  }

  .essay-excerpt {
    color: var(--text-secondary);
    line-height: 1.6;
    margin-bottom: 1rem;
  }

  .essay-publication {
    font-size: 0.9rem;
    color: var(--text-tertiary);
    margin-bottom: 1rem;
    font-style: italic;
  }

  .essay-tags {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .tag {
    font-size: 0.75rem;
    color: var(--accent-secondary);
    background: rgba(139, 115, 85, 0.1);
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
  }

  .essays-footer {
    text-align: center;
    padding-top: 2rem;
    border-top: 1px solid var(--border-secondary);
    color: var(--text-light);
    font-size: 0.85rem;
  }

  @media (max-width: 768px) {
    .essays-container {
      padding: 4rem 0 2rem;
    }

    .container {
      padding: 0 1rem;
    }

    .essays-title {
      font-size: 2.5rem;
    }

    .essays-filters {
      flex-direction: column;
      gap: 1rem;
      padding: 1rem;
    }

    .filter-group {
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
    }

    .essays-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .essays-stats {
      gap: 1.5rem;
      flex-wrap: wrap;
    }

    .stat-number {
      font-size: 1.5rem;
    }
  }
</style>

<script>
  // Essay filtering functionality
  document.addEventListener('DOMContentLoaded', () => {
    const authorFilter = document.getElementById('author-filter') as HTMLSelectElement;
    const yearFilter = document.getElementById('year-filter') as HTMLSelectElement;
    const essayCards = document.querySelectorAll('.essay-card');

    function filterEssays() {
      const selectedAuthor = authorFilter.value;
      const selectedYear = yearFilter.value;

      essayCards.forEach(card => {
        const cardAuthor = (card as HTMLElement).dataset.author;
        const cardYear = (card as HTMLElement).dataset.year;

        const authorMatch = selectedAuthor === 'all' || cardAuthor === selectedAuthor;
        const yearMatch = selectedYear === 'all' || cardYear === selectedYear;

        if (authorMatch && yearMatch) {
          (card as HTMLElement).style.display = 'block';
        } else {
          (card as HTMLElement).style.display = 'none';
        }
      });
    }

    authorFilter?.addEventListener('change', filterEssays);
    yearFilter?.addEventListener('change', filterEssays);
  });
</script>