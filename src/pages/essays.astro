---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';

// Get all essays, sorted by date (newest first)
const essays = await getCollection('essays');
const sortedEssays = essays.sort((a, b) => b.data.date.getTime() - a.data.date.getTime());

// Group essays by author for better organization
const essaysByAuthor = sortedEssays.reduce((acc, essay) => {
  const authorName = essay.data.author.name;
  if (!acc[authorName]) {
    acc[authorName] = [];
  }
  acc[authorName].push(essay);
  return acc;
}, {} as Record<string, typeof essays>);

const authors = Object.keys(essaysByAuthor).sort();

// Get unique years for filtering
const years = [...new Set(sortedEssays.map(essay => essay.data.date.getFullYear()))].sort((a, b) => b - a);
---

<Layout title="Essays - Paper Lanterns">
  <Navigation />
  
  <main>
    <div class="container">
      <header class="essays-header">
        <h1 class="essays-title">Essays</h1>
        <p class="essays-description">
          {essays.length > 0 ? (
            `Explore ${essays.length} thoughtful essays from history's greatest minds, spanning ${years[years.length - 1]} to ${years[0]}.`
          ) : (
            "We're currently curating authentic essays from verified historical sources."
          )}
        </p>
      </header>

      {essays.length > 0 ? (
        <>
          <div class="essays-filters">
            <div class="filter-group">
              <label for="author-filter" class="filter-label">Author:</label>
              <select id="author-filter" class="filter-select">
                <option value="all">All Authors</option>
                {authors.map(author => (
                  <option value={author}>{author}</option>
                ))}
              </select>
            </div>
            
            <div class="filter-group">
              <label for="year-filter" class="filter-label">Year:</label>
              <select id="year-filter" class="filter-select">
                <option value="all">All Years</option>
                {years.map(year => (
                  <option value={year.toString()}>{year}</option>
                ))}
              </select>
            </div>
          </div>

          <div class="essays-stats">
            <div class="stat">
              <span class="stat-number">{essays.length}</span>
              <span class="stat-label">Total Essays</span>
            </div>
            <div class="stat">
              <span class="stat-number">{authors.length}</span>
              <span class="stat-label">Authors</span>
            </div>
            <div class="stat">
              <span class="stat-number">{years.length}</span>
              <span class="stat-label">Years Covered</span>
            </div>
          </div>

          <div class="essays-grid" id="essays-grid">
            {sortedEssays.map(essay => (
              <article class="essay-card" data-author={essay.data.author.name} data-year={essay.data.date.getFullYear().toString()}>
                <div class="essay-meta">
                  <time class="essay-date">
                    {essay.data.date.toLocaleDateString('en-US', { 
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}
                  </time>
                  <span class="essay-author">{essay.data.author.name}</span>
                </div>
                
                <h2 class="essay-title">
                  <a href={`/essay/${essay.slug}`}>{essay.data.title}</a>
                </h2>
                
                <p class="essay-context">{essay.data.context}</p>
                
                {essay.data.excerpt && (
                  <blockquote class="essay-excerpt">
                    "{essay.data.excerpt}"
                  </blockquote>
                )}
                
                <div class="essay-tags">
                  {essay.data.tags.slice(0, 3).map(tag => (
                    <span class="tag">{tag}</span>
                  ))}
                </div>
              </article>
            ))}
          </div>
        </>
      ) : (
        <div class="empty-essays">
          <div class="empty-icon">ðŸ“š</div>
          <h2>Coming Soon</h2>
          <p>
            We're working to add authentic, verified essays from historical sources. 
            Our focus is on ensuring every essay can be traced to reliable public domain sources 
            like Wikisource, Project Gutenberg, and national archives.
          </p>
          <div class="empty-actions">
            <a href="/letters" class="primary-button">Browse Letters</a>
            <a href="/speeches" class="secondary-button">View Speeches</a>
            <a href="/lectures" class="secondary-button">Read Lectures</a>
          </div>
        </div>
      )}
    </div>
  </main>
</Layout>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  .essays-header {
    text-align: center;
    padding: 8rem 0 4rem;
  }

  .essays-title {
    font-family: 'EB Garamond', serif;
    font-size: clamp(3rem, 8vw, 5rem);
    font-weight: 500;
    color: var(--text-primary);
    margin-bottom: 1.5rem;
    letter-spacing: -0.02em;
  }

  .essays-description {
    font-size: 1.1rem;
    line-height: 1.6;
    color: var(--text-secondary);
    max-width: 600px;
    margin: 0 auto;
  }

  .essays-filters {
    display: flex;
    gap: 2rem;
    justify-content: center;
    margin-bottom: 3rem;
    flex-wrap: wrap;
  }

  .filter-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .filter-label {
    font-size: 0.9rem;
    font-weight: 500;
    color: var(--text-primary);
  }

  .filter-select {
    padding: 0.75rem 1rem;
    border: 1px solid var(--border-secondary);
    border-radius: 8px;
    background: var(--bg-primary);
    color: var(--text-primary);
    font-size: 0.9rem;
    min-width: 150px;
  }

  .essays-stats {
    display: flex;
    justify-content: center;
    gap: 3rem;
    margin-bottom: 4rem;
    padding: 2rem 0;
    border-top: 1px solid var(--border-secondary);
    border-bottom: 1px solid var(--border-secondary);
  }

  .stat {
    text-align: center;
  }

  .stat-number {
    display: block;
    font-family: 'EB Garamond', serif;
    font-size: 2.5rem;
    font-weight: 500;
    color: var(--accent-primary);
    margin-bottom: 0.5rem;
  }

  .stat-label {
    font-size: 0.9rem;
    color: var(--text-muted);
    text-transform: uppercase;
    letter-spacing: 0.1em;
  }

  .essays-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 2rem;
    margin-bottom: 4rem;
  }

  .essay-card {
    background: var(--bg-primary);
    border: 1px solid var(--border-secondary);
    border-radius: 12px;
    padding: 2rem;
    transition: all 0.3s ease;
    position: relative;
  }

  .essay-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 25px var(--drop-shadow);
    border-color: var(--accent-primary);
  }

  .essay-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    font-size: 0.9rem;
    color: var(--text-muted);
  }

  .essay-date {
    color: var(--accent-secondary);
  }

  .essay-author {
    font-weight: 500;
    color: var(--text-secondary);
  }

  .essay-title {
    font-family: 'EB Garamond', serif;
    font-size: 1.4rem;
    font-weight: 500;
    margin-bottom: 1rem;
    line-height: 1.3;
  }

  .essay-title a {
    text-decoration: none;
    color: var(--text-primary);
    transition: color 0.2s ease;
  }

  .essay-title a:hover {
    color: var(--accent-primary);
  }

  .essay-context {
    color: var(--text-secondary);
    margin-bottom: 1rem;
    line-height: 1.5;
  }

  .essay-excerpt {
    font-style: italic;
    color: var(--text-secondary);
    border-left: 3px solid var(--accent-primary);
    padding-left: 1rem;
    margin: 1rem 0;
    font-size: 0.95rem;
    line-height: 1.5;
  }

  .essay-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 1.5rem;
  }

  .tag {
    background: var(--bg-accent);
    color: var(--text-secondary);
    padding: 0.25rem 0.75rem;
    border-radius: 15px;
    font-size: 0.8rem;
    border: 1px solid var(--border-accent);
  }

  .empty-essays {
    text-align: center;
    padding: 4rem 2rem;
    max-width: 600px;
    margin: 0 auto;
  }

  .empty-icon {
    font-size: 4rem;
    margin-bottom: 2rem;
    opacity: 0.6;
  }

  .empty-essays h2 {
    font-family: 'EB Garamond', serif;
    font-size: 2rem;
    color: var(--text-primary);
    margin-bottom: 1rem;
  }

  .empty-essays p {
    color: var(--text-secondary);
    line-height: 1.6;
    margin-bottom: 2rem;
  }

  .empty-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
  }

  .primary-button, .secondary-button {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    text-decoration: none;
    border-radius: 8px;
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .primary-button {
    background: var(--accent-primary);
    color: white;
    border: 1px solid var(--accent-primary);
  }

  .primary-button:hover {
    background: var(--accent-tertiary);
    border-color: var(--accent-tertiary);
  }

  .secondary-button {
    background: var(--bg-accent);
    color: var(--text-primary);
    border: 1px solid var(--border-accent);
  }

  .secondary-button:hover {
    background: var(--accent-primary);
    color: white;
    border-color: var(--accent-primary);
  }

  @media (max-width: 768px) {
    .container {
      padding: 0 1rem;
    }

    .essays-header {
      padding: 6rem 0 3rem;
    }

    .essays-filters {
      flex-direction: column;
      align-items: center;
      gap: 1rem;
    }

    .essays-stats {
      gap: 2rem;
      flex-wrap: wrap;
    }

    .essays-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .essay-card {
      padding: 1.5rem;
    }

    .empty-actions {
      flex-direction: column;
      align-items: center;
    }
  }
</style>

<script>
  function filterEssays() {
    const authorFilter = document.getElementById('author-filter') as HTMLSelectElement;
    const yearFilter = document.getElementById('year-filter') as HTMLSelectElement;
    const essays = document.querySelectorAll('.essay-card');
    
    if (!authorFilter || !yearFilter) return;
    
    const selectedAuthor = authorFilter.value;
    const selectedYear = yearFilter.value;
    
    essays.forEach((essay) => {
      const essayElement = essay as HTMLElement;
      const essayAuthor = essayElement.dataset.author;
      const essayYear = essayElement.dataset.year;
      
      const authorMatch = selectedAuthor === 'all' || essayAuthor === selectedAuthor;
      const yearMatch = selectedYear === 'all' || essayYear === selectedYear;
      
      if (authorMatch && yearMatch) {
        essayElement.style.display = 'block';
      } else {
        essayElement.style.display = 'none';
      }
    });
  }

  document.addEventListener('DOMContentLoaded', () => {
    const authorFilter = document.getElementById('author-filter');
    const yearFilter = document.getElementById('year-filter');
    
    authorFilter?.addEventListener('change', filterEssays);
    yearFilter?.addEventListener('change', filterEssays);
  });
</script>