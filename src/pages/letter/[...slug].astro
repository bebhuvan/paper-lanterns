---
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.astro';
import StructuredData from '../../components/StructuredData.astro';
import Breadcrumb from '../../components/Breadcrumb.astro';
import ArticleHeader from '../../components/ArticleHeader.astro';
import ShareActions from '../../components/ShareActions.astro';
import TagList from '../../components/TagList.astro';
import RelatedContent from '../../components/RelatedContent.astro';
import { getLetters, getAllContentItems, getAdjacentItems } from '../../lib/data-layer';
import { calculateReadingTime, getRelatedContent } from '../../lib/content';

export async function getStaticPaths() {
  const letters = await getLetters();
  return letters.map((letter) => ({
    params: { slug: letter.slug },
    props: letter,
  }));
}

const letter = Astro.props;
const { Content } = await letter.render();

// Calculate reading time using utility
const readTime = calculateReadingTime(letter.body);

// Get all content and letters for navigation and related items
const allLetters = await getLetters();
const allContent = await getAllContentItems();

// Get adjacent letters for navigation
const { prev: prevLetter, next: nextLetter } = getAdjacentItems(
  allLetters,
  letter.slug,
  item => item.slug
);

// Get related content using utility function
const letterWithType = { ...letter, contentType: 'letter' as const };
const related = getRelatedContent(letterWithType, allContent, 4);

// Get current index for navigation display
const currentIndex = allLetters.findIndex(l => l.slug === letter.slug);
---

<Layout
  title={`${letter.data.title} by ${letter.data.author.name} - Paper Lanterns`}
  description={`A ${letter.data.date.getFullYear()} letter from ${letter.data.author.name}${letter.data.recipient ? ` to ${letter.data.recipient}` : ''}. ${letter.data.excerpt}`}
  author={letter.data.author.name}
  publishedTime={letter.data.date.toISOString()}
  image={letter.data.image || `/og-letter.png`}
>
  <StructuredData
    type="Article"
    title={letter.data.title}
    description={letter.data.excerpt}
    author={letter.data.author.name}
    publishedTime={letter.data.date.toISOString()}
    url={Astro.url.href}
    image={letter.data.image || '/og-letter.png'}
    keywords={letter.data.tags}
  />
  <Navigation />
  <Breadcrumb items={[
    { label: 'Letters', url: '/letters' },
    { label: letter.data.title }
  ]} />

  <main class="reading-container">
    <article class="letter">
      <ArticleHeader
        title={letter.data.title}
        author={letter.data.author}
        date={letter.data.date}
        location={letter.data.location}
        readTime={readTime}
        category="Letter"
      />
      
      <div class="letter-content" style={`--drop-cap-color: ${letter.data.drop_cap_color}`}>
        <Content />
        
        {letter.data.signature && (
          <div class="signature">{letter.data.signature}</div>
        )}
      </div>

      <TagList tags={letter.data.tags} />

      {letter.data.about && (letter.data.about.context || letter.data.about.significance || letter.data.about.author_bio || letter.data.about.recipient_info || (letter.data.about.links && letter.data.about.links.length > 0)) && (
        <section class="about-section">
        <h2 class="about-title">The Story Behind the Words</h2>
        <p class="about-subtitle">Context that deepens your understanding</p>
        
        {letter.data.about.context && (
          <div class="about-item">
            <h3>Historical Context</h3>
            <div class="about-content">
              <p>{letter.data.about.context}</p>
            </div>
          </div>
        )}
        
        {letter.data.about.significance && (
          <div class="about-item">
            <h3>Significance</h3>
            <div class="about-content">
              <p>{letter.data.about.significance}</p>
            </div>
          </div>
        )}
        
        {letter.data.about.author_bio && (
          <div class="about-item">
            <h3>About {letter.data.author.name}</h3>
            <div class="about-content">
              <p>{letter.data.about.author_bio}</p>
            </div>
          </div>
        )}
        
        {letter.data.about.recipient_info && (
          <div class="about-item">
            <h3>About {letter.data.recipient}</h3>
            <div class="about-content">
              <p>{letter.data.about.recipient_info}</p>
            </div>
          </div>
        )}
        
        {letter.data.about.links && letter.data.about.links.length > 0 && (
          <div class="about-item">
            <h3>Further Reading</h3>
            <div class="resource-links">
              {letter.data.about.links.map(link => (
                <a href={link.url} target="_blank" rel="noopener noreferrer" class="resource-card">
                  <div class="resource-link-title">{link.title}</div>
                  {link.description && <div class="resource-description">{link.description}</div>}
                  <div class="resource-meta">{new URL(link.url).hostname} Â· External</div>
                </a>
              ))}
            </div>
          </div>
        )}
        </section>
      )}

      <ShareActions />
    </article>

    <RelatedContent items={related} title="Related Content" />

    <nav class="letter-nav">
      <div class="nav-item nav-prev">
        {prevLetter ? (
          <a href={`/letter/${prevLetter.slug}`} class="nav-link">
            <span class="nav-label">Previous</span>
            <span class="nav-title">{prevLetter.data.title.length > 60 ? prevLetter.data.title.slice(0, 60) + '...' : prevLetter.data.title}</span>
            <span class="nav-author">{prevLetter.data.author.name}</span>
          </a>
        ) : (
          <div class="nav-placeholder"></div>
        )}
      </div>

      <div class="letter-info">
        <span class="info-number">{currentIndex + 1}</span>
        <span class="info-separator">/</span>
        <span class="info-total">{allLetters.length}</span>
      </div>

      <div class="nav-item nav-next">
        {nextLetter ? (
          <a href={`/letter/${nextLetter.slug}`} class="nav-link">
            <span class="nav-label">Next</span>
            <span class="nav-title">{nextLetter.data.title.length > 60 ? nextLetter.data.title.slice(0, 60) + '...' : nextLetter.data.title}</span>
            <span class="nav-author">{nextLetter.data.author.name}</span>
          </a>
        ) : (
          <div class="nav-placeholder"></div>
        )}
      </div>
    </nav>

    <footer class="footer">
      <div class="footer-content-inner">
        <p class="footer-source">Source: {letter.data.source}</p>
        <p class="footer-license">This letter is in the public domain</p>
      </div>
    </footer>
  </main>
</Layout>

<style>
  @import '../../styles/article-content.css';

  /* Page-specific navigation styles (letter-nav is unique to letters) */
  .letter-nav {
    display: grid;
    grid-template-columns: 1fr auto 1fr;
    gap: 4rem;
    margin: 10vh 0 6vh;
    padding: 4rem 0;
    border-top: 1px solid var(--border-secondary);
    align-items: center;
  }

  .nav-item {
    display: flex;
  }

  .nav-prev {
    justify-content: flex-start;
  }

  .nav-next {
    justify-content: flex-end;
  }

  .nav-link {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    text-decoration: none;
    max-width: 320px;
    padding: 1.5rem;
    border: 1px solid var(--border-secondary);
    background: var(--bg-secondary);
  }

  .nav-prev .nav-link {
    align-items: flex-start;
    text-align: left;
  }

  .nav-next .nav-link {
    align-items: flex-end;
    text-align: right;
  }

  .nav-label {
    font-size: 0.6875rem;
    text-transform: uppercase;
    letter-spacing: 0.12em;
    color: var(--accent-primary);
    opacity: 0.6;
    font-weight: 500;
    font-family: 'Inter', -apple-system, sans-serif;
  }

  .nav-title {
    font-size: 1.0625rem;
    font-weight: 400;
    color: var(--text-primary);
    line-height: 1.4;
  }

  .nav-author {
    font-size: 0.8125rem;
    color: var(--text-tertiary);
    font-weight: 300;
    font-style: italic;
  }

  .nav-placeholder {
    width: 320px;
  }

  .letter-info {
    text-align: center;
    display: flex;
    align-items: baseline;
    justify-content: center;
    gap: 0.5rem;
    font-family: 'Inter', -apple-system, sans-serif;
  }

  .info-number {
    font-size: 1.5rem;
    font-weight: 300;
    color: var(--text-secondary);
    letter-spacing: -0.02em;
  }

  .info-separator {
    font-size: 0.875rem;
    color: var(--text-light);
  }

  .info-total {
    font-size: 0.875rem;
    font-weight: 400;
    color: var(--text-muted);
  }

  /* Footer */
  .footer {
    text-align: center;
    padding: 5rem 0 8rem;
    margin-top: 8vh;
  }

  .footer-content-inner {
    max-width: 600px;
    margin: 0 auto;
    padding-top: 3rem;
    border-top: 1px solid var(--border-primary);
  }

  .footer-source {
    font-size: 0.9375rem;
    color: var(--text-tertiary);
    font-weight: 300;
    margin-bottom: 0.75rem;
    letter-spacing: 0.01em;
  }

  .footer-license {
    font-size: 0.8125rem;
    color: var(--text-light);
    font-weight: 300;
    font-style: italic;
    letter-spacing: 0.02em;
  }

  /* Mobile navigation fixes */
  @media (max-width: 768px) {
    .letter-nav {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      text-align: center;
    }

    .nav-item {
      justify-content: center;
    }

    .nav-prev,
    .nav-next {
      justify-content: center;
    }

    .nav-link {
      max-width: 100%;
      align-items: center;
      text-align: center;
    }

    .nav-prev .nav-link,
    .nav-next .nav-link {
      align-items: center;
      text-align: center;
    }

    .nav-placeholder {
      display: none;
    }

    .letter-info {
      order: -1;
      margin-bottom: 2rem;
    }
  }
</style>

<script>
  // Share functionality
  async function shareContent() {
    if (navigator.share) {
      try {
        await navigator.share({
          title: document.title,
          url: window.location.href
        });
      } catch (err) {
        copyLink();
      }
    } else {
      copyLink();
    }
  }

  // Copy link to clipboard
  async function copyLink() {
    try {
      await navigator.clipboard.writeText(window.location.href);
      showToast('Link copied to clipboard');
    } catch (err) {
      // Fallback for older browsers
      const textArea = document.createElement('textarea');
      textArea.value = window.location.href;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      showToast('Link copied to clipboard');
    }
  }

  // Copy text content
  async function copyText() {
    const letterContent = document.querySelector('.letter-content');
    if (letterContent) {
      const text = letterContent.textContent || letterContent.innerText;
      try {
        await navigator.clipboard.writeText(text);
        showToast('Letter text copied to clipboard');
      } catch (err) {
        console.error('Failed to copy text:', err);
      }
    }
  }

  // Simple toast notification
  function showToast(message: string) {
    const toast = document.createElement('div');
    toast.style.cssText = `
      position: fixed;
      bottom: 2rem;
      left: 50%;
      transform: translateX(-50%);
      background: var(--text-primary);
      color: white;
      padding: 0.75rem 1.5rem;
      border-radius: 25px;
      font-size: 0.9rem;
      z-index: 1000;
    `;
    toast.textContent = message;
    document.body.appendChild(toast);

    setTimeout(() => document.body.removeChild(toast), 2000);
  }

  // Make functions globally available
  (window as any).shareContent = shareContent;
  (window as any).copyLink = copyLink;
  (window as any).copyText = copyText;
</script>