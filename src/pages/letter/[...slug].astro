---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.astro';

export async function getStaticPaths() {
  const letters = await getCollection('letters');
  return letters.map((letter) => ({
    params: { slug: letter.slug },
    props: letter,
  }));
}

const letter = Astro.props;
const { Content } = await letter.render();

// Calculate reading time (rough estimate: 200 words per minute)
const wordCount = letter.body.split(/\s+/).length;
const readTime = Math.ceil(wordCount / 200);

// Get all content for navigation and related items
const allLetters = await getCollection('letters');
const allSpeeches = await getCollection('speeches');
const allContent = [
  ...allLetters.map(item => ({ ...item, contentType: 'letter' })),
  ...allSpeeches.map(item => ({ ...item, contentType: 'speech' }))
];

const currentIndex = allLetters.findIndex(l => l.slug === letter.slug);
const prevLetter = currentIndex > 0 ? allLetters[currentIndex - 1] : null;
const nextLetter = currentIndex < allLetters.length - 1 ? allLetters[currentIndex + 1] : null;

// Find related content by author and tags
const relatedByAuthor = allContent
  .filter(item => 
    item.slug !== letter.slug && 
    item.data.author.name === letter.data.author.name
  )
  .slice(0, 3);

const relatedByTags = allContent
  .filter(item => {
    if (item.slug === letter.slug) return false;
    if (item.data.author.name === letter.data.author.name) return false; // Already covered above
    
    const commonTags = item.data.tags.filter(tag => 
      letter.data.tags.includes(tag)
    ).length;
    
    return commonTags > 0;
  })
  .sort((a, b) => {
    const aCommon = a.data.tags.filter(tag => letter.data.tags.includes(tag)).length;
    const bCommon = b.data.tags.filter(tag => letter.data.tags.includes(tag)).length;
    return bCommon - aCommon;
  })
  .slice(0, 3);

const relatedContent = [...relatedByAuthor, ...relatedByTags].slice(0, 4);
---

<Layout 
  title={`${letter.data.title} by ${letter.data.author.name} - Voice from time`}
  description={letter.data.excerpt}
  author={letter.data.author.name}
  publishedTime={letter.data.date.toISOString()}
  image={letter.data.image || `/og-letter.png`}
>
  <Navigation />
  
  <main class="reading-container">
    <a href="/" class="back-link">← Back to Voice from time</a>
    
    <article class="letter">
      <div class="letter-meta">
        <h1 class="author">{letter.data.author.name}</h1>
        <p class="context">{letter.data.context}</p>
        <div class="reading-info">
          <span>{readTime} min read</span>
          {letter.data.location && <span> • {letter.data.location}</span>}
        </div>
      </div>
      
      <div class="letter-content" style={`--drop-cap-color: ${letter.data.drop_cap_color}`}>
        <Content />
        
        {letter.data.signature && (
          <div class="signature">{letter.data.signature}</div>
        )}
      </div>

      {letter.data.tags && letter.data.tags.length > 0 && (
        <div class="letter-tags">
          <h3>Topics</h3>
          <div class="tags-list">
            {letter.data.tags.map(tag => (
              <a href={`/search?q=${encodeURIComponent(tag)}`} class="tag">{tag}</a>
            ))}
          </div>
        </div>
      )}

      {letter.data.about && (letter.data.about.context || letter.data.about.significance || letter.data.about.author_bio || letter.data.about.recipient_info || (letter.data.about.links && letter.data.about.links.length > 0)) && (
        <section class="about-section">
        <h2 class="about-title">About This Letter</h2>
        
        {letter.data.about.context && (
          <div class="about-item">
            <h3>Historical Context</h3>
            <div class="about-content">
              <p>{letter.data.about.context}</p>
            </div>
          </div>
        )}
        
        {letter.data.about.significance && (
          <div class="about-item">
            <h3>Significance</h3>
            <div class="about-content">
              <p>{letter.data.about.significance}</p>
            </div>
          </div>
        )}
        
        {letter.data.about.author_bio && (
          <div class="about-item">
            <h3>About {letter.data.author.name}</h3>
            <div class="about-content">
              <p>{letter.data.about.author_bio}</p>
            </div>
          </div>
        )}
        
        {letter.data.about.recipient_info && (
          <div class="about-item">
            <h3>About {letter.data.recipient}</h3>
            <div class="about-content">
              <p>{letter.data.about.recipient_info}</p>
            </div>
          </div>
        )}
        
        {letter.data.about.links && letter.data.about.links.length > 0 && (
          <div class="about-item">
            <h3>Additional Resources</h3>
            <ul class="resource-links">
              {letter.data.about.links.map(link => (
                <li>
                  <a href={link.url} target="_blank" rel="noopener noreferrer" class="resource-link">
                    {link.title}
                    <svg class="external-link-icon" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M7 7h10v10M7 17L17 7"></path>
                    </svg>
                  </a>
                  {link.description && <span class="resource-description">{link.description}</span>}
                </li>
              ))}
            </ul>
          </div>
        )}
        </section>
      )}

      <div class="letter-actions">
        <button onclick="shareContent()" class="action-btn">Share</button>
        <button onclick="copyLink()" class="action-btn">Copy Link</button>
        <button onclick="copyText()" class="action-btn">Copy Text</button>
      </div>
    </article>

    {relatedContent.length > 0 && (
      <section class="related-content">
        <h2 class="related-title">
          {relatedByAuthor.length > 0 ? `More from ${letter.data.author.name}` : 'Related Content'}
        </h2>
        <div class="related-grid">
          {relatedContent.map(item => (
            <article class="related-item">
              <div class="related-meta">
                <span class="related-type">{item.contentType === 'letter' ? 'Letter' : 'Speech'}</span>
                <time class="related-date">{item.data.date.getFullYear()}</time>
              </div>
              
              <h3 class="related-item-title">
                <a href={`/${item.contentType}/${item.slug}`}>
                  {item.data.title}
                </a>
              </h3>
              
              <p class="related-author">{item.data.author.name}</p>
              <p class="related-excerpt">{item.data.excerpt.slice(0, 120)}...</p>
            </article>
          ))}
        </div>
      </section>
    )}

    <nav class="letter-nav">
      {prevLetter ? (
        <a href={`/letter/${prevLetter.slug}`} class="nav-link">← Previous letter</a>
      ) : (
        <span class="nav-link disabled">← Previous letter</span>
      )}
      
      <div class="letter-info">
        Letter {currentIndex + 1} of {allLetters.length}
      </div>
      
      {nextLetter ? (
        <a href={`/letter/${nextLetter.slug}`} class="nav-link">Next letter →</a>
      ) : (
        <span class="nav-link disabled">Next letter →</span>
      )}
    </nav>

    <footer class="footer">
      <p>Source: {letter.data.source}</p>
      <p>All letters are in the public domain</p>
    </footer>
  </main>
</Layout>

<style>
  .reading-container {
    max-width: 680px;
    margin: 0 auto;
    padding: 6rem 2rem 4rem;
    position: relative;
  }

  .reading-container::before {
    content: '';
    position: absolute;
    left: -2rem;
    top: 0;
    width: 3px;
    height: 80px;
    background: linear-gradient(180deg, var(--accent-primary) 0%, var(--accent-tertiary) 50%, transparent 100%);
    opacity: 0.6;
  }

  .back-link {
    display: inline-block;
    color: var(--accent-secondary);
    text-decoration: none;
    font-size: 0.9rem;
    margin-bottom: 4rem;
    font-weight: 300;
    transition: color 0.2s ease;
  }

  .back-link:hover {
    color: var(--text-primary);
  }

  .letter {
    margin-bottom: 6rem;
  }

  .letter-meta {
    margin-bottom: 3rem;
    text-align: left;
  }

  .author {
    font-family: 'EB Garamond', serif;
    font-size: 1.4rem;
    font-weight: 500;
    color: var(--text-primary);
    margin-bottom: 0.3rem;
    letter-spacing: 0.01em;
    font-variant: small-caps;
  }

  .context {
    color: var(--accent-secondary);
    font-size: 1rem;
    font-style: italic;
    margin-bottom: 0.5rem;
  }

  .reading-info {
    color: var(--text-muted);
    font-size: 0.85rem;
    font-weight: 300;
  }

  .letter-content {
    font-size: 1.3rem;
    line-height: 1.75;
    color: var(--text-primary);
    position: relative;
    overflow-wrap: break-word;
    word-wrap: break-word;
    word-break: break-word;
  }

  .letter-content :global(p:first-of-type::first-letter) {
    font-family: 'EB Garamond', serif;
    font-size: 5.5rem;
    line-height: 0.75;
    float: left;
    margin: 0.05rem 0.6rem 0.1rem 0;
    color: var(--drop-cap-color);
    font-weight: 600;
  }

  .letter-content :global(p) {
    margin-bottom: 1.5rem;
    text-indent: 1.5rem;
  }

  .letter-content :global(p:first-of-type) {
    text-indent: 0;
  }

  .letter-content :global(p:last-child) {
    margin-bottom: 0;
  }

  .signature {
    margin-top: 2.5rem;
    text-align: right;
    font-style: italic;
    color: var(--accent-secondary);
    font-size: 1.1rem;
    position: relative;
  }

  .signature::before {
    content: '—';
    margin-right: 0.5rem;
    color: var(--accent-primary);
  }

  .letter-tags {
    margin: 3rem 0;
    padding: 2rem 0;
    border-top: 1px solid var(--border-secondary);
    text-align: center;
  }

  .letter-tags h3 {
    font-family: 'EB Garamond', serif;
    font-size: 1.1rem;
    font-weight: 500;
    color: var(--accent-secondary);
    margin-bottom: 1.5rem;
  }

  .tags-list {
    display: flex;
    justify-content: center;
    gap: 0.75rem;
    flex-wrap: wrap;
  }

  .tag {
    display: inline-block;
    padding: 0.4rem 0.8rem;
    background: var(--bg-accent);
    color: var(--text-secondary);
    text-decoration: none;
    border-radius: 20px;
    font-size: 0.85rem;
    border: 1px solid var(--border-accent);
    transition: all 0.2s ease;
  }

  .tag:hover {
    background: var(--accent-primary);
    color: white;
    border-color: var(--accent-primary);
  }

  .letter-actions {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin: 3rem 0;
    padding: 2rem 0;
    border-top: 1px solid var(--border-secondary);
    border-bottom: 1px solid var(--border-secondary);
  }

  .action-btn {
    background: none;
    border: 1px solid var(--text-light);
    padding: 0.5rem 1rem;
    border-radius: 20px;
    color: var(--text-tertiary);
    font-size: 0.85rem;
    cursor: pointer;
    transition: all 0.2s ease;
    font-family: inherit;
  }

  .action-btn:hover {
    border-color: var(--accent-primary);
    color: var(--text-primary);
    background: var(--bg-accent);
  }

  .about-section {
    background: var(--bg-accent);
    border: 1px solid var(--border-accent);
    border-radius: 12px;
    padding: 3rem;
    margin: 3rem 0 0 0;
    position: relative;
  }

  .about-section::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, var(--accent-primary) 0%, var(--accent-tertiary) 50%, var(--accent-primary) 100%);
    border-radius: 12px 12px 0 0;
    opacity: 0.6;
  }

  .about-title {
    font-family: 'EB Garamond', serif;
    font-size: 1.5rem;
    font-weight: 500;
    color: var(--text-primary);
    margin-bottom: 2rem;
    text-align: center;
    position: relative;
  }

  .about-title::after {
    content: '✦';
    position: absolute;
    bottom: -1rem;
    left: 50%;
    transform: translateX(-50%);
    color: var(--accent-primary);
    font-size: 0.8rem;
    opacity: 0.6;
  }

  .about-item {
    margin-bottom: 2.5rem;
  }

  .about-item:last-child {
    margin-bottom: 0;
  }

  .about-item h3 {
    font-family: 'EB Garamond', serif;
    font-size: 1.1rem;
    font-weight: 500;
    color: var(--accent-secondary);
    margin-bottom: 0.8rem;
    letter-spacing: 0.01em;
  }

  .about-content {
    font-size: 1rem;
    line-height: 1.6;
    color: var(--text-secondary);
  }

  .about-content :global(p) {
    margin-bottom: 1rem;
  }

  .about-content :global(p:last-child) {
    margin-bottom: 0;
  }

  .about-content :global(a) {
    color: var(--accent-secondary);
    text-decoration: none;
    border-bottom: 1px solid rgba(139, 115, 85, 0.3);
    transition: all 0.2s ease;
  }

  .about-content :global(a:hover) {
    color: var(--text-primary);
    border-bottom-color: rgba(139, 115, 85, 0.6);
  }

  .resource-links {
    list-style: none;
    padding: 0;
  }

  .resource-links li {
    margin-bottom: 1rem;
    padding-left: 1.5rem;
    position: relative;
  }

  .resource-links li::before {
    content: '→';
    position: absolute;
    left: 0;
    color: var(--accent-primary);
    font-weight: 500;
  }

  .resource-link {
    color: var(--accent-secondary);
    text-decoration: none;
    font-weight: 400;
    display: inline-flex;
    align-items: center;
    gap: 0.3rem;
    transition: color 0.2s ease;
  }

  .resource-link:hover {
    color: var(--text-primary);
  }

  .external-link-icon {
    opacity: 0.6;
    transition: opacity 0.2s ease;
  }

  .resource-link:hover .external-link-icon {
    opacity: 1;
  }

  .resource-description {
    display: block;
    font-size: 0.9rem;
    color: var(--text-muted);
    margin-top: 0.3rem;
    font-style: italic;
  }

  .related-content {
    margin: 4rem 0;
    padding: 3rem 0;
    border-top: 1px solid var(--border-secondary);
  }

  .related-title {
    font-family: 'EB Garamond', serif;
    font-size: 1.4rem;
    font-weight: 500;
    color: var(--text-primary);
    text-align: center;
    margin-bottom: 3rem;
    position: relative;
  }

  .related-title::after {
    content: '✦';
    position: absolute;
    bottom: -1rem;
    left: 50%;
    transform: translateX(-50%);
    color: var(--accent-primary);
    font-size: 0.8rem;
    opacity: 0.6;
  }

  .related-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 2rem;
  }

  .related-item {
    background: var(--bg-accent);
    border: 1px solid var(--border-accent);
    border-radius: 12px;
    padding: 1.5rem;
    transition: all 0.2s ease;
  }

  .related-item:hover {
    border-color: var(--accent-primary);
    background: rgba(212, 165, 116, 0.02);
  }

  .related-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }

  .related-type {
    font-size: 0.7rem;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    color: var(--accent-secondary);
    background: rgba(139, 115, 85, 0.1);
    padding: 0.2rem 0.5rem;
    border-radius: 10px;
  }

  .related-date {
    font-size: 0.8rem;
    color: var(--text-muted);
  }

  .related-item-title {
    margin-bottom: 0.5rem;
  }

  .related-item-title a {
    font-family: 'EB Garamond', serif;
    font-size: 1.1rem;
    font-weight: 500;
    color: var(--text-primary);
    text-decoration: none;
    transition: color 0.2s ease;
    line-height: 1.3;
  }

  .related-item-title a:hover {
    color: var(--accent-primary);
  }

  .related-author {
    font-size: 0.9rem;
    color: var(--accent-secondary);
    margin-bottom: 0.75rem;
    font-weight: 500;
  }

  .related-excerpt {
    font-size: 0.85rem;
    color: var(--text-secondary);
    line-height: 1.5;
  }

  .letter-nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 4rem 0;
    padding: 2rem 0;
    border-top: 1px solid var(--border-secondary);
  }

  .nav-link {
    color: var(--accent-secondary);
    text-decoration: none;
    font-size: 0.9rem;
    font-weight: 300;
    transition: color 0.2s ease;
  }

  .nav-link:hover {
    color: var(--text-primary);
  }

  .nav-link.disabled {
    color: var(--text-light);
    pointer-events: none;
  }

  .letter-info {
    text-align: center;
    color: var(--text-muted);
    font-size: 0.85rem;
  }

  .footer {
    text-align: center;
    padding: 4rem 0;
    color: var(--text-light);
    font-size: 0.8rem;
    font-weight: 300;
    border-top: 1px solid var(--border-secondary);
    margin-top: 4rem;
  }

  .footer p {
    margin-bottom: 0.5rem;
  }

  @media (max-width: 768px) {
    .reading-container {
      padding: 4rem 1.5rem 2rem;
      max-width: 100%;
    }

    .reading-container::before {
      display: none;
    }

    .letter-content {
      font-size: 1.15rem; /* Better mobile readability */
      line-height: 1.75;
    }

    .letter-content :global(p:first-of-type::first-letter) {
      font-size: 4.5rem;
      margin-right: 0.5rem;
    }

    .letter-content :global(p) {
      text-indent: 1rem;
    }

    .author {
      font-size: 1.3rem;
    }

    .context {
      font-size: 0.9rem;
    }

    .letter-nav {
      flex-direction: column;
      gap: 1rem;
      text-align: center;
    }

    .letter-actions {
      flex-wrap: wrap;
      justify-content: center;
      gap: 1rem;
    }

    .action-btn {
      font-size: 0.9rem; /* Larger text */
      padding: 0.6rem 1rem; /* Better touch target */
      min-height: 44px;
    }

    .about-section {
      padding: 2rem 1.5rem;
      margin: 3rem 0;
    }

    .about-title {
      font-size: 1.3rem;
    }

    .about-item h3 {
      font-size: 1rem;
    }

    .about-content {
      font-size: 0.95rem;
    }

    .related-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .related-item {
      padding: 1.25rem;
    }

    .tags-list {
      gap: 0.5rem;
    }

    .tag {
      font-size: 0.8rem;
      padding: 0.3rem 0.6rem;
    }
  }

  @media (max-width: 480px) {
    .reading-container {
      padding: 3rem 1.25rem 2rem; /* More horizontal padding */
    }

    .letter-content {
      font-size: 1.05rem;
      line-height: 1.7; /* Better line spacing */
    }

    .letter-content :global(p:first-of-type::first-letter) {
      font-size: 4rem;
      margin-right: 0.4rem;
    }

    .letter-content :global(p) {
      text-indent: 0.8rem;
      margin-bottom: 1.2rem;
    }

    .author {
      font-size: 1.2rem;
    }

    .about-section {
      padding: 1.5rem 1rem;
      margin: 2rem 0;
    }

    .related-item {
      padding: 1rem;
    }

    .back-link {
      margin-bottom: 3rem;
    }
  }
</style>

<script>
  // Share functionality
  async function shareContent() {
    if (navigator.share) {
      try {
        await navigator.share({
          title: document.title,
          url: window.location.href
        });
      } catch (err) {
        copyLink();
      }
    } else {
      copyLink();
    }
  }

  // Copy link to clipboard
  async function copyLink() {
    try {
      await navigator.clipboard.writeText(window.location.href);
      showToast('Link copied to clipboard');
    } catch (err) {
      // Fallback for older browsers
      const textArea = document.createElement('textarea');
      textArea.value = window.location.href;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      showToast('Link copied to clipboard');
    }
  }

  // Copy text content
  async function copyText() {
    const letterContent = document.querySelector('.letter-content');
    if (letterContent) {
      const text = letterContent.textContent || letterContent.innerText;
      try {
        await navigator.clipboard.writeText(text);
        showToast('Letter text copied to clipboard');
      } catch (err) {
        console.error('Failed to copy text:', err);
      }
    }
  }

  // Simple toast notification
  function showToast(message: string) {
    const toast = document.createElement('div');
    toast.style.cssText = `
      position: fixed;
      bottom: 2rem;
      left: 50%;
      transform: translateX(-50%);
      background: var(--text-primary);
      color: white;
      padding: 0.75rem 1.5rem;
      border-radius: 25px;
      font-size: 0.9rem;
      z-index: 1000;
      opacity: 0;
      transition: opacity 0.3s ease;
    `;
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => toast.style.opacity = '1', 100);
    setTimeout(() => {
      toast.style.opacity = '0';
      setTimeout(() => document.body.removeChild(toast), 300);
    }, 2000);
  }

  // Make functions globally available
  (window as any).shareContent = shareContent;
  (window as any).copyLink = copyLink;
  (window as any).copyText = copyText;
</script>