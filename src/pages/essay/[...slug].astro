---
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.astro';
import StructuredData from '../../components/StructuredData.astro';
import Breadcrumb from '../../components/Breadcrumb.astro';
import ArticleHeader from '../../components/ArticleHeader.astro';
import ShareActions from '../../components/ShareActions.astro';
import TagList from '../../components/TagList.astro';
import RelatedContent from '../../components/RelatedContent.astro';
import { getEssays, getAllContentItems, getAdjacentItems, sortByDate } from '../../lib/data-layer';
import { calculateReadingTime, getRelatedContent } from '../../lib/content';

export async function getStaticPaths() {
  const essays = await getEssays();
  return essays.map(essay => ({
    params: { slug: essay.slug },
    props: { essay }
  }));
}

const { essay } = Astro.props;
const { Content } = await essay.render();

// Calculate reading time using utility
const readTime = calculateReadingTime(essay.body);

// Get all content and essays for navigation and related items
const allEssays = await getEssays();
const allContent = await getAllContentItems();
const sortedEssays = sortByDate(allEssays, 'desc');

// Get adjacent essays for navigation
const currentIndex = sortedEssays.findIndex(e => e.slug === essay.slug);
const prevEssay = currentIndex < sortedEssays.length - 1 ? sortedEssays[currentIndex + 1] : null;
const nextEssay = currentIndex > 0 ? sortedEssays[currentIndex - 1] : null;

// Get related content using utility function
const essayWithType = { ...essay, contentType: 'essay' as const };
const related = getRelatedContent(essayWithType, allContent, 4);
---

<Layout 
  title={`${essay.data.title} by ${essay.data.author.name} - Paper Lanterns`}
  description={`A ${essay.data.date.getFullYear()} essay by ${essay.data.author.name}. ${essay.data.context.replace(/\[([^\]]*)\]\([^)]*\)/g, '$1')}${essay.data.excerpt ? ` ${essay.data.excerpt}` : ''}`}
  author={essay.data.author.name}
  publishedTime={essay.data.date.toISOString()}
>
    <StructuredData
    type="Article"
    title={essay.data.title}
    description={essay.data.excerpt}
    author={essay.data.author.name}
    publishedTime={essay.data.date.toISOString()}
    url={Astro.url.href}
    image={essay.data.image || '/og-essay.png'}
    keywords={essay.data.tags}
  />
  <Navigation />
  
  <Breadcrumb items={[
    { label: 'Essays', url: '/essays' },
    { label: essay.data.title }
  ]} />

  <main>
    <article class="essay">
      <div class="reading-container">
        <a href="/essays" class="back-link">← Back to Essays</a>

        <ArticleHeader
          title={essay.data.title}
          author={essay.data.author}
          date={essay.data.date}
          readTime={readTime}
          category="Essay"
        />

        <div class="essay-content">
          <Content />
        </div>

        <TagList tags={essay.data.tags} />

        <ShareActions />

        {essay.data.about && (essay.data.about.context || essay.data.about.significance || essay.data.about.author_bio || (essay.data.about.links && essay.data.about.links.length > 0)) && (
          <section class="about-section">
            <h2 class="about-title">About This Essay</h2>
            
            {essay.data.about.context && (
              <div class="about-item">
                <h3>Historical Context</h3>
                <div class="about-content">
                  <p>{essay.data.about.context}</p>
                </div>
              </div>
            )}
            
            {essay.data.about.significance && (
              <div class="about-item">
                <h3>Significance</h3>
                <div class="about-content">
                  <p>{essay.data.about.significance}</p>
                </div>
              </div>
            )}
            
            {essay.data.about.author_bio && (
              <div class="about-item">
                <h3>About {essay.data.author.name}</h3>
                <div class="about-content">
                  <p>{essay.data.about.author_bio}</p>
                </div>
              </div>
            )}
            
            {essay.data.about.links && essay.data.about.links.length > 0 && (
              <div class="about-item">
                <h3>Additional Resources</h3>
                <ul class="resource-links">
                  {essay.data.about.links.map(link => (
                    <li>
                      <a href={link.url} target="_blank" rel="noopener noreferrer" class="resource-link">
                        {link.title}
                        <svg class="external-link-icon" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                          <path d="M7 7h10v10M7 17L17 7"></path>
                        </svg>
                      </a>
                      {link.description && <span class="resource-description">{link.description}</span>}
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </section>
        )}
        
        <footer class="essay-footer">
          <div class="essay-nav">
            {prevEssay && (
              <a href={`/essay/${prevEssay.slug}`} class="nav-prev">
                <span class="nav-label">← Previous Essay</span>
                <span class="nav-title">{prevEssay.data.title}</span>
              </a>
            )}
            {nextEssay && (
              <a href={`/essay/${nextEssay.slug}`} class="nav-next">
                <span class="nav-label">Next Essay →</span>
                <span class="nav-title">{nextEssay.data.title}</span>
              </a>
            )}
          </div>
          
          <div class="footer-actions">
            <a href="/essays" class="secondary-button">Browse All Essays</a>
            <button class="secondary-button" data-action="print">Print Essay</button>
          </div>
        </footer>
      </div>
    </article>

    <RelatedContent items={related} title="Related Content" />
  </main>
</Layout>

<style>
  @import '../../styles/article-content.css';
</style>