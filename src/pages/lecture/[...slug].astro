---
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.astro';
import StructuredData from '../../components/StructuredData.astro';
import Breadcrumb from '../../components/Breadcrumb.astro';
import ArticleHeader from '../../components/ArticleHeader.astro';
import ShareActions from '../../components/ShareActions.astro';
import TagList from '../../components/TagList.astro';
import RelatedContent from '../../components/RelatedContent.astro';
import { getLectures, getAllContentItems, getAdjacentItems } from '../../lib/data-layer';
import { calculateReadingTime, getRelatedContent } from '../../lib/content';

export async function getStaticPaths() {
  const lectures = await getLectures();
  return lectures.map((lecture) => ({
    params: { slug: lecture.slug },
    props: lecture,
  }));
}

const lecture = Astro.props;
const { Content } = await lecture.render();

// Calculate reading time using utility
const readTime = calculateReadingTime(lecture.body);

// Get all content and lectures for navigation and related items
const allLectures = await getLectures();
const allContent = await getAllContentItems();

// Get adjacent lectures for navigation
const { prev: prevLecture, next: nextLecture } = getAdjacentItems(
  allLectures,
  lecture.slug,
  item => item.slug
);

// Get related content using utility function
const lectureWithType = { ...lecture, contentType: 'lecture' as const };
const related = getRelatedContent(lectureWithType, allContent, 4);

// Get current index for navigation display
const currentIndex = allLectures.findIndex(l => l.slug === lecture.slug);
---

<Layout 
  title={`${lecture.data.title} by ${lecture.data.author.name} - Paper Lanterns`}
  description={`A ${lecture.data.date.getFullYear()} lecture by ${lecture.data.author.name}${lecture.data.context ? ` ${lecture.data.context.replace(/\[([^\]]*)\]\([^)]*\)/g, '$1')}` : ''}. ${lecture.data.excerpt}`}
  author={lecture.data.author.name}
  publishedTime={lecture.data.date.toISOString()}
  image={lecture.data.image || `/og-lecture.png`}
>
    <StructuredData
    type="Article"
    title={lecture.data.title}
    description={lecture.data.excerpt}
    author={lecture.data.author.name}
    publishedTime={lecture.data.date.toISOString()}
    url={Astro.url.href}
    image={lecture.data.image || '/og-lecture.png'}
    keywords={lecture.data.tags}
  />
  <Navigation />
  
  <Breadcrumb items={[
    { label: 'Lectures', url: '/lectures' },
    { label: lecture.data.title }
  ]} />

  <main class="reading-container">
    <a href="/" class="back-link">← Back to Paper Lanterns</a>
    
    <article class="lecture">
      <ArticleHeader
        title={lecture.data.title}
        author={lecture.data.author}
        date={lecture.data.date}
        location={lecture.data.location}
        readTime={readTime}
        category="Lecture"
      />
      
      <div class="lecture-content" style={`--drop-cap-color: ${lecture.data.drop_cap_color}`}>
        <Content />
      </div>

      {lecture.data.tags && lecture.data.tags.length > 0 && (
        <div class="lecture-tags">
          <h3>Topics</h3>
          <div class="tags-list">
            {lecture.data.tags.map(tag => (
              <a href={`/search?q=${encodeURIComponent(tag)}`} class="tag">{tag}</a>
            ))}
          </div>
        </div>
      )}

      {lecture.data.about && (lecture.data.about.context || lecture.data.about.significance || lecture.data.about.author_bio || lecture.data.about.series_info || (lecture.data.about.links && lecture.data.about.links.length > 0)) && (
        <section class="about-section">
        <h2 class="about-title">About This Lecture</h2>
        
        {lecture.data.about.context && (
          <div class="about-item">
            <h3>Historical Context</h3>
            <div class="about-content">
              <p>{lecture.data.about.context}</p>
            </div>
          </div>
        )}
        
        {lecture.data.about.significance && (
          <div class="about-item">
            <h3>Significance</h3>
            <div class="about-content">
              <p>{lecture.data.about.significance}</p>
            </div>
          </div>
        )}
        
        {lecture.data.about.author_bio && (
          <div class="about-item">
            <h3>About {lecture.data.author.name}</h3>
            <div class="about-content">
              <p>{lecture.data.about.author_bio}</p>
            </div>
          </div>
        )}
        
        {lecture.data.about.series_info && (
          <div class="about-item">
            <h3>About the Series</h3>
            <div class="about-content">
              <p>{lecture.data.about.series_info}</p>
            </div>
          </div>
        )}
        
        {lecture.data.about.links && lecture.data.about.links.length > 0 && (
          <div class="about-item">
            <h3>Additional Resources</h3>
            <ul class="resource-links">
              {lecture.data.about.links.map(link => (
                <li>
                  <a href={link.url} target="_blank" rel="noopener noreferrer" class="resource-link">
                    {link.title}
                    <svg class="external-link-icon" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M7 7h10v10M7 17L17 7"></path>
                    </svg>
                  </a>
                  {link.description && <span class="resource-description">{link.description}</span>}
                </li>
              ))}
            </ul>
          </div>
        )}
        </section>
      )}

      <TagList tags={lecture.data.tags} />

      <ShareActions />
    </article>

    <RelatedContent items={related} title="Related Content" />

    <nav class="lecture-nav">
      {prevLecture ? (
        <a href={`/lecture/${prevLecture.slug}`} class="nav-link">← Previous lecture</a>
      ) : (
        <span class="nav-link disabled">← Previous lecture</span>
      )}
      
      <div class="lecture-info">
        Lecture {currentIndex + 1} of {allLectures.length}
      </div>
      
      {nextLecture ? (
        <a href={`/lecture/${nextLecture.slug}`} class="nav-link">Next lecture →</a>
      ) : (
        <span class="nav-link disabled">Next lecture →</span>
      )}
    </nav>

    <footer class="footer">
      <p>Source: {lecture.data.source}</p>
      <p>All lectures are in the public domain</p>
    </footer>
  </main>
</Layout>

<style>
  @import '../../styles/article-content.css';
</style>

<script>
  // Share functionality
  async function shareContent() {
    if (navigator.share) {
      try {
        await navigator.share({
          title: document.title,
          url: window.location.href
        });
      } catch (err) {
        copyLink();
      }
    } else {
      copyLink();
    }
  }

  // Copy link to clipboard
  async function copyLink() {
    try {
      await navigator.clipboard.writeText(window.location.href);
      showToast('Link copied to clipboard');
    } catch (err) {
      // Fallback for older browsers
      const textArea = document.createElement('textarea');
      textArea.value = window.location.href;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      showToast('Link copied to clipboard');
    }
  }

  // Copy text content
  async function copyText() {
    const lectureContent = document.querySelector('.lecture-content');
    if (lectureContent) {
      const text = lectureContent.textContent || lectureContent.innerText;
      try {
        await navigator.clipboard.writeText(text);
        showToast('Lecture text copied to clipboard');
      } catch (err) {
        console.error('Failed to copy text:', err);
      }
    }
  }

  // Simple toast notification
  function showToast(message: string) {
    const toast = document.createElement('div');
    toast.style.cssText = `
      position: fixed;
      bottom: 2rem;
      left: 50%;
      transform: translateX(-50%);
      background: var(--text-primary);
      color: white;
      padding: 0.75rem 1.5rem;
      border-radius: 25px;
      font-size: 0.9rem;
      z-index: 1000;
      opacity: 0;
      transition: opacity 0.3s ease;
    `;
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => toast.style.opacity = '1', 100);
    setTimeout(() => {
      toast.style.opacity = '0';
      setTimeout(() => document.body.removeChild(toast), 300);
    }, 2000);
  }

  // Make functions globally available
  (window as any).shareContent = shareContent;
  (window as any).copyLink = copyLink;
  (window as any).copyText = copyText;
</script>