---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.astro';

export async function getStaticPaths() {
  const gardenPosts = await getCollection('garden');
  const publicPosts = gardenPosts.filter(post => !post.data.private);
  
  return publicPosts.map(post => ({
    params: { slug: post.slug },
    props: { post }
  }));
}

const { post } = Astro.props;
const { Content } = await post.render();

// Format relative dates
function getRelativeDate(date) {
  const now = new Date();
  const diffTime = Math.abs(now - date);
  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
  
  if (diffDays === 0) return 'Today';
  if (diffDays === 1) return '1 day ago';
  if (diffDays < 7) return `${diffDays} days ago`;
  if (diffDays < 14) return '1 week ago';
  if (diffDays < 30) return `${Math.floor(diffDays / 7)} weeks ago`;
  if (diffDays < 60) return '1 month ago';
  return `${Math.floor(diffDays / 30)} months ago`;
}
---

<Layout 
  title={`${post.data.title} - Garden - Paper Lanterns`} 
  description={post.data.content}
  author={post.data.author || "Paper Lanterns"}
  publishedTime={post.data.date.toISOString()}
>
  <Navigation />
  
  <div class="container">
    <nav class="breadcrumb">
      <a href="/garden">← Back to Garden</a>
    </nav>

    <article class="post">
      <header class="post-header">
        <div class="post-meta">
          <span class="post-type">{post.data.type}</span>
          <span class="post-date">{getRelativeDate(post.data.date)}</span>
        </div>
        <h1 class="post-title">{post.data.title}</h1>
      </header>

      <div class={`post-content ${post.data.type === 'quotes' ? 'quote-item' : ''}`}>
        <p>{post.data.content}</p>
        {post.data.attribution && (
          <div class="quote-attribution">{post.data.attribution}</div>
        )}
      </div>
      
      {post.data.link && (
        <a href={post.data.link.url} class="post-link" target="_blank" rel="noopener noreferrer">
          <div class="link-title">{post.data.link.title}</div>
          <div class="link-domain">{post.data.link.domain}</div>
          <div class="link-preview">{post.data.link.preview}</div>
        </a>
      )}

      {post.data.tags && post.data.tags.length > 0 && (
        <div class="post-tags">
          {post.data.tags.map(tag => (
            <span class="tag">{tag}</span>
          ))}
        </div>
      )}

      <div class="post-actions">
        <button class="action-btn" onclick="sharePost()">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"></path>
            <polyline points="16,6 12,2 8,6"></polyline>
            <line x1="12" y1="2" x2="12" y2="15"></line>
          </svg>
          Share
        </button>
        <button class="action-btn" onclick="copyLink()">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path>
            <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path>
          </svg>
          Copy Link
        </button>
      </div>
    </article>

    <footer class="footer">
      <p><a href="/garden">← Back to Garden</a></p>
    </footer>
  </div>

  <div class="copied-feedback" id="copiedFeedback">Copied to clipboard!</div>
</Layout>

<style>
  .container {
    max-width: 680px;
    margin: 0 auto;
    padding: 8rem 3rem 4rem;
  }

  .breadcrumb {
    margin-bottom: 3rem;
  }

  .breadcrumb a {
    color: var(--text-secondary);
    text-decoration: none;
    font-size: 0.9rem;
    transition: color 0.3s ease;
  }

  .breadcrumb a:hover {
    color: var(--text-primary);
  }

  .post-header {
    margin-bottom: 3rem;
  }

  .post-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1.5rem;
    font-size: 0.9rem;
    color: var(--text-muted);
  }

  .post-type {
    background: var(--accent-primary);
    color: var(--bg-primary);
    padding: 0.3rem 0.8rem;
    border-radius: 12px;
    font-size: 0.8rem;
    font-weight: 500;
    text-transform: capitalize;
  }

  .post-date {
    font-weight: 300;
  }

  .post-title {
    font-family: 'EB Garamond', serif;
    font-size: 2.5rem;
    font-weight: 400;
    color: var(--text-primary);
    line-height: 1.3;
    margin: 0;
  }

  .post-content {
    font-size: 1.3rem;
    line-height: 1.8;
    color: var(--text-primary);
    margin-bottom: 3rem;
  }

  .post-content p {
    margin-bottom: 1.5rem;
  }

  .post-content p:last-child {
    margin-bottom: 0;
  }

  .quote-item {
    font-style: italic;
    position: relative;
    padding-left: 2rem;
  }

  .quote-item::before {
    content: '"';
    position: absolute;
    left: 0;
    top: -0.3rem;
    font-size: 3rem;
    color: var(--accent-primary);
    opacity: 0.5;
    font-family: 'EB Garamond', serif;
  }

  .quote-attribution {
    text-align: right;
    margin-top: 1.5rem;
    font-size: 1.1rem;
    color: var(--text-secondary);
  }

  .quote-attribution::before {
    content: '— ';
    color: var(--accent-primary);
  }

  .post-link {
    display: block;
    background: var(--bg-accent);
    border: 1px solid var(--border-secondary);
    border-radius: 8px;
    padding: 2rem;
    text-decoration: none;
    color: inherit;
    transition: all 0.3s ease;
    margin-bottom: 2rem;
  }

  .post-link:hover {
    background: var(--bg-primary);
    border-color: var(--accent-primary);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px var(--drop-shadow);
  }

  .link-title {
    font-weight: 500;
    color: var(--text-primary);
    margin-bottom: 0.8rem;
    font-size: 1.2rem;
  }

  .link-domain {
    font-size: 1rem;
    color: var(--text-secondary);
    font-weight: 400;
    margin-bottom: 1rem;
  }

  .link-preview {
    font-size: 1rem;
    color: var(--text-secondary);
    line-height: 1.6;
  }

  .post-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.8rem;
    margin-bottom: 3rem;
  }

  .tag {
    background: var(--bg-accent);
    color: var(--text-secondary);
    padding: 0.4rem 0.8rem;
    border-radius: 6px;
    font-size: 0.8rem;
    font-weight: 400;
  }

  .post-actions {
    display: flex;
    gap: 1.5rem;
    margin-bottom: 4rem;
    padding-top: 2rem;
    border-top: 1px solid var(--border-secondary);
  }

  .action-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: none;
    border: none;
    color: var(--text-muted);
    font-size: 0.9rem;
    cursor: pointer;
    padding: 0.6rem 1rem;
    border-radius: 6px;
    transition: all 0.3s ease;
    font-family: 'Crimson Text', serif;
    font-weight: 400;
  }

  .action-btn:hover {
    color: var(--text-secondary);
    background: var(--bg-accent);
  }

  .action-btn svg {
    width: 16px;
    height: 16px;
  }

  .footer {
    text-align: center;
    padding: 3rem 0;
    border-top: 1px solid var(--border-secondary);
  }

  .footer a {
    color: var(--text-secondary);
    text-decoration: none;
    font-size: 0.9rem;
  }

  .footer a:hover {
    color: var(--text-primary);
  }

  .copied-feedback {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: var(--text-primary);
    color: var(--bg-primary);
    padding: 1rem 1.8rem;
    border-radius: 8px;
    font-size: 0.9rem;
    font-weight: 500;
    opacity: 0;
    pointer-events: none;
    transition: all 0.3s ease;
    z-index: 1000;
  }

  .copied-feedback.show {
    opacity: 1;
  }

  /* Mobile Responsiveness */
  @media (max-width: 768px) {
    .container {
      padding: 6rem 2rem 2rem;
    }

    .post-title {
      font-size: 2rem;
    }

    .post-content {
      font-size: 1.2rem;
    }

    .post-actions {
      flex-wrap: wrap;
      gap: 1rem;
    }
  }

  @media (max-width: 480px) {
    .container {
      padding: 5rem 1.5rem 2rem;
    }

    .post-title {
      font-size: 1.8rem;
    }

    .post-content {
      font-size: 1.1rem;
    }
  }
</style>

<script>
  function sharePost() {
    const title = document.querySelector('.post-title').textContent;
    const content = document.querySelector('.post-content').textContent.trim();
    const url = window.location.href;
    
    if (navigator.share) {
      navigator.share({
        title: title,
        text: content.substring(0, 100) + '...',
        url: url
      }).catch(err => {
        console.log('Error sharing:', err);
        copyLink();
      });
    } else {
      copyLink();
    }
  }

  function copyLink() {
    const url = window.location.href;
    
    if (navigator.clipboard && navigator.clipboard.writeText) {
      navigator.clipboard.writeText(url).then(() => {
        showFeedback('Link copied to clipboard!');
      }).catch(err => {
        console.log('Clipboard error:', err);
        fallbackCopy(url);
      });
    } else {
      fallbackCopy(url);
    }
  }

  function fallbackCopy(text) {
    const textArea = document.createElement('textarea');
    textArea.value = text;
    textArea.style.position = 'fixed';
    textArea.style.opacity = '0';
    document.body.appendChild(textArea);
    textArea.select();
    try {
      document.execCommand('copy');
      showFeedback('Copied to clipboard!');
    } catch (err) {
      showFeedback('Copy failed - please try manually');
    }
    document.body.removeChild(textArea);
  }

  function showFeedback(message) {
    const feedback = document.getElementById('copiedFeedback');
    feedback.textContent = message;
    feedback.classList.add('show');
    setTimeout(() => {
      feedback.classList.remove('show');
    }, 2000);
  }
</script>