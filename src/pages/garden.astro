---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';

// Get garden posts and sort by date (newest first)
const allGardenPosts = await getCollection('garden');
const publicPosts = allGardenPosts.filter(post => !post.data.private);
const gardenPosts = publicPosts.sort((a, b) => b.data.date.getTime() - a.data.date.getTime());

// Format relative dates
function getRelativeDate(date) {
  const now = new Date();
  const diffTime = Math.abs(now - date);
  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
  
  if (diffDays === 0) return 'Today';
  if (diffDays === 1) return '1 day ago';
  if (diffDays < 7) return `${diffDays} days ago`;
  if (diffDays < 14) return '1 week ago';
  if (diffDays < 30) return `${Math.floor(diffDays / 7)} weeks ago`;
  if (diffDays < 60) return '1 month ago';
  return `${Math.floor(diffDays / 30)} months ago`;
}
---

<Layout 
  title="Garden - Paper Lanterns" 
  description="A quiet collection of public domain discoveries, forgotten treasures, and thoughtful links worth preserving"
  author="Paper Lanterns"
>
  <Navigation />
  
  <div class="container">
    <header class="page-header">
      <h1 class="page-title">Garden</h1>
      <p class="page-description">A quiet collection of public domain discoveries, forgotten treasures, and thoughtful links worth preserving</p>
    </header>

    <div class="filters-section">
      <div class="filter-tabs">
        <button class="filter-tab active" data-filter="all">All</button>
        <button class="filter-tab" data-filter="links">Links</button>
        <button class="filter-tab" data-filter="quotes">Quotes</button>
        <button class="filter-tab" data-filter="thoughts">Thoughts</button>
      </div>
    </div>

    <main class="stream">
      {gardenPosts.map((post) => (
          <article class="stream-item" data-type={post.data.type}>
            <div class="stream-meta">{getRelativeDate(post.data.date)}</div>
            <a href={`/garden/${post.slug}`} class="post-link-wrapper">
              <h3 class="post-title">{post.data.title}</h3>
            </a>
            <div class={`stream-content ${post.data.type === 'quotes' ? 'quote-item' : ''}`}>
              <p>{post.data.content}</p>
              {post.data.attribution && (
                <div class="quote-attribution">{post.data.attribution}</div>
              )}
            </div>
            
            {post.data.link && (
              <a href={post.data.link.url} class="stream-link" target="_blank" rel="noopener noreferrer">
                <div class="link-title">{post.data.link.title}</div>
                <div class="link-domain">{post.data.link.domain}</div>
                <div class="link-preview">{post.data.link.preview}</div>
              </a>
            )}
            
            <div class="stream-actions">
              <button class="action-btn" onclick="sharePost(this)">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"></path>
                  <polyline points="16,6 12,2 8,6"></polyline>
                  <line x1="12" y1="2" x2="12" y2="15"></line>
                </svg>
                Share
              </button>
              <button class="action-btn" onclick="copyLink(this)">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path>
                  <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path>
                </svg>
                Copy Link
              </button>
            </div>
          </article>
      ))}
    </main>

    <div class="load-more">
      <button class="load-more-btn">Load older posts</button>
    </div>

    <footer class="footer">
      <p>Garden · A corner of Paper Lanterns</p>
    </footer>
  </div>

  <!-- Feedback for copy actions -->
  <div class="copied-feedback" id="copiedFeedback">Copied to clipboard!</div>
</Layout>

<style>
  .container {
    max-width: 680px;
    margin: 0 auto;
    padding: 8rem 3rem 4rem;
  }

  .page-header {
    text-align: center;
    margin-bottom: 4rem;
  }

  .page-title {
    font-family: 'EB Garamond', serif;
    font-size: 3rem;
    font-weight: 400;
    color: var(--text-primary);
    margin-bottom: 1.5rem;
    letter-spacing: -0.01em;
  }

  .page-description {
    font-size: 1.1rem;
    color: var(--text-secondary);
    font-weight: 300;
    line-height: 1.6;
  }

  .filters-section {
    margin-bottom: 4rem;
    text-align: center;
  }

  .filter-tabs {
    display: inline-flex;
    background: var(--bg-accent);
    border-radius: 25px;
    padding: 0.4rem;
    gap: 0.4rem;
  }

  .filter-tab {
    background: none;
    border: none;
    padding: 0.6rem 1.2rem;
    border-radius: 20px;
    font-size: 0.9rem;
    color: var(--text-secondary);
    cursor: pointer;
    transition: all 0.3s ease;
    font-family: 'Crimson Text', serif;
    font-weight: 400;
  }

  .filter-tab.active {
    background: var(--bg-primary);
    color: var(--text-primary);
    box-shadow: 0 2px 8px var(--drop-shadow);
  }

  .filter-tab:hover:not(.active) {
    color: var(--text-primary);
  }

  .stream {
    margin-bottom: 6rem;
  }

  .stream-item {
    margin-bottom: 4rem;
    position: relative;
  }

  .stream-item::before {
    content: '';
    position: absolute;
    left: -3rem;
    top: 0.5rem;
    width: 6px;
    height: 6px;
    background: var(--accent-primary);
    border-radius: 50%;
    opacity: 0.6;
  }

  .stream-item:nth-child(2n)::before {
    background: var(--accent-secondary);
  }

  .stream-item:nth-child(3n)::before {
    background: var(--accent-gold);
  }

  .stream-item:nth-child(4n)::before {
    background: #9381c2;
  }

  .stream-item:nth-child(5n)::before {
    background: #f07167;
  }

  .stream-meta {
    margin-bottom: 1rem;
    font-size: 0.9rem;
    color: var(--text-muted);
    font-weight: 300;
  }

  .post-link-wrapper {
    text-decoration: none;
    color: inherit;
  }

  .post-title {
    font-family: 'EB Garamond', serif;
    font-size: 1.4rem;
    font-weight: 500;
    color: var(--text-primary);
    margin: 0 0 1.5rem 0;
    line-height: 1.3;
    transition: color 0.3s ease;
  }

  .post-link-wrapper:hover .post-title {
    color: var(--accent-primary);
  }

  .stream-content {
    font-size: 1.2rem;
    line-height: 1.8;
    color: var(--text-primary);
    margin-bottom: 2rem;
  }

  .stream-content p {
    margin-bottom: 1.5rem;
  }

  .stream-content p:last-child {
    margin-bottom: 0;
  }

  .stream-link {
    display: inline-block;
    background: var(--bg-accent);
    border: 1px solid var(--border-secondary);
    border-radius: 8px;
    padding: 1.5rem;
    text-decoration: none;
    color: inherit;
    transition: all 0.3s ease;
    width: 100%;
    margin-bottom: 1rem;
  }

  .stream-link:hover {
    background: var(--bg-primary);
    border-color: var(--accent-primary);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px var(--drop-shadow);
  }

  .link-title {
    font-weight: 500;
    color: var(--text-primary);
    margin-bottom: 0.5rem;
    font-size: 1.05rem;
  }

  .link-domain {
    font-size: 0.9rem;
    color: var(--text-secondary);
    font-weight: 400;
  }

  .link-preview {
    margin-top: 0.8rem;
    font-size: 0.9rem;
    color: var(--text-secondary);
    line-height: 1.5;
  }

  .quote-item {
    font-style: italic;
    position: relative;
    padding-left: 1.5rem;
  }

  .quote-item::before {
    content: '"';
    position: absolute;
    left: 0;
    top: -0.2rem;
    font-size: 2.5rem;
    color: var(--accent-primary);
    opacity: 0.5;
    font-family: 'EB Garamond', serif;
  }

  .quote-attribution {
    text-align: right;
    margin-top: 1rem;
    font-size: 0.95rem;
    color: var(--text-secondary);
  }

  .quote-attribution::before {
    content: '— ';
    color: var(--accent-primary);
  }

  .stream-actions {
    display: flex;
    gap: 1.5rem;
    margin-top: 1.5rem;
    padding-top: 1.5rem;
    border-top: 1px solid var(--border-secondary);
  }

  .action-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: none;
    border: none;
    color: var(--text-muted);
    font-size: 0.85rem;
    cursor: pointer;
    padding: 0.5rem 0.8rem;
    border-radius: 6px;
    transition: all 0.3s ease;
    font-family: 'Crimson Text', serif;
    font-weight: 400;
  }

  .action-btn:hover {
    color: var(--text-secondary);
    background: var(--bg-accent);
  }

  .action-btn svg {
    width: 15px;
    height: 15px;
  }

  .copied-feedback {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: var(--text-primary);
    color: var(--bg-primary);
    padding: 1rem 1.8rem;
    border-radius: 8px;
    font-size: 0.9rem;
    font-weight: 500;
    opacity: 0;
    pointer-events: none;
    transition: all 0.3s ease;
    z-index: 1000;
  }

  .copied-feedback.show {
    opacity: 1;
  }

  .load-more {
    text-align: center;
    margin: 4rem 0;
  }

  .load-more-btn {
    background: none;
    border: 1px solid var(--border-secondary);
    color: var(--text-secondary);
    padding: 0.8rem 2rem;
    border-radius: 4px;
    font-family: 'Crimson Text', serif;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .load-more-btn:hover {
    border-color: var(--accent-primary);
    color: var(--text-primary);
  }

  .footer {
    text-align: center;
    padding: 4rem 0;
    color: var(--text-light);
    font-size: 0.8rem;
    font-weight: 300;
    border-top: 1px solid var(--border-secondary);
    margin-top: 4rem;
  }

  /* Mobile Responsiveness */
  @media (max-width: 768px) {
    .container {
      padding: 6rem 2rem 2rem;
      max-width: 100%;
    }

    .page-header {
      margin-bottom: 3rem;
    }

    .page-title {
      font-size: 2.5rem;
    }

    .stream-item {
      margin-bottom: 3rem;
    }

    .stream-item::before {
      display: none;
    }

    .stream-actions {
      flex-wrap: wrap;
      gap: 1rem;
    }

    .filter-tabs {
      flex-wrap: wrap;
      justify-content: center;
    }

    .stream-content {
      font-size: 1.1rem;
    }
  }

  @media (max-width: 480px) {
    .container {
      padding: 5rem 1.5rem 2rem;
    }

    .page-title {
      font-size: 2rem;
    }

    .stream-content {
      font-size: 1rem;
    }

    .filter-tab {
      padding: 0.5rem 1rem;
      font-size: 0.85rem;
    }
  }
</style>

<script>
  // Filter functionality
  document.querySelectorAll('.filter-tab').forEach(tab => {
    tab.addEventListener('click', function() {
      // Update active tab
      document.querySelectorAll('.filter-tab').forEach(t => t.classList.remove('active'));
      this.classList.add('active');
      
      // Filter posts
      const filter = this.getAttribute('data-filter');
      document.querySelectorAll('.stream-item').forEach(item => {
        if (filter === 'all' || item.getAttribute('data-type') === filter) {
          item.style.display = 'block';
        } else {
          item.style.display = 'none';
        }
      });
    });
  });

  // Share and copy functionality
  function sharePost(button) {
    const post = button.closest('.stream-item');
    const content = post.querySelector('.stream-content').textContent.trim();
    const url = window.location.href + '#post-' + Math.random().toString(36).substr(2, 9);
    
    if (navigator.share) {
      navigator.share({
        title: 'Garden - Paper Lanterns',
        text: content.substring(0, 100) + '...',
        url: url
      }).catch(err => {
        console.log('Error sharing:', err);
        copyLink(button);
      });
    } else {
      copyLink(button);
    }
  }

  function copyLink(button) {
    const url = window.location.href + '#post-' + Math.random().toString(36).substr(2, 9);
    
    if (navigator.clipboard && navigator.clipboard.writeText) {
      navigator.clipboard.writeText(url).then(() => {
        showFeedback('Link copied to clipboard!');
      }).catch(err => {
        console.log('Clipboard error:', err);
        fallbackCopy(url);
      });
    } else {
      fallbackCopy(url);
    }
  }

  function fallbackCopy(text) {
    const textArea = document.createElement('textarea');
    textArea.value = text;
    textArea.style.position = 'fixed';
    textArea.style.opacity = '0';
    document.body.appendChild(textArea);
    textArea.select();
    try {
      document.execCommand('copy');
      showFeedback('Copied to clipboard!');
    } catch (err) {
      showFeedback('Copy failed - please try manually');
    }
    document.body.removeChild(textArea);
  }

  function showFeedback(message) {
    const feedback = document.getElementById('copiedFeedback');
    feedback.textContent = message;
    feedback.classList.add('show');
    setTimeout(() => {
      feedback.classList.remove('show');
    }, 2000);
  }
</script>